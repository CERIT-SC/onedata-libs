# coding: utf-8

"""
    Onepanel

    # Overview  This is the RESTful API definition of **Onepanel** component of Onedata data management system [onedata.org](http://onedata.org).  > This API is defined using [Swagger](http://swagger.io/), the JSON specification can be used to automatically generate client libraries -   [swagger.json](../../../swagger/onepanel/swagger.json).  This API allows control and configuration of local Onedata deployment, in particular full control over the **Onezone** and **Oneprovider** services and their distribution and monitoring on the local resources.  The API is grouped into 3 categories of operations:   * **Onepanel** - for common operations   * **Oneprovider** - for Oneprovider specific administrative operations   * **Onezone** - for Onezone specific administrative operations  Each of these components is composed of the following services:   * **Worker services** - these are available under `/zone/workers` and     `/provider/workers` paths,   * **Databases services** - each Onedata component stores it's metadata in a     Couchbase backend, which can be distributed on any number of nodes, these     are available under `/zone/databases` and `/provider/databases` paths,   * **Cluster manager services** - this is a service which controls other     deployed processes in one site, these are availables under these are     available under `/zone/managers` and `/provider/managers` paths.  **Onezone** and **Oneprovider** components are composed of 3 types of services: **managers**, **databases** and **workers**.  Using this API each of these components can be deployed, configured, started and stopped on a specified host in the local site, in the context of either **Onezone** or **Oneprovider** service.  All paths listed in this documentation are relative to the base Onepanel REST API which is `/api/v3/onepanel`, so complete URL for a request to Onepanel service is:  ``` http://HOSTNAME:PORT/api/v3/onepanel/... ```  ## Authentication  ### Token authentication  The recommended, safest way of authenticating requests to Onepanel API is using the **Onedata access tokens**. The token should be present in `X-Auth-Token` or `Authorization: Bearer` header. See [Onezone documentation](/#/home/api/latest/onezone?anchor=section/Overview/Authentication-and-authorization) for detailed explanation of the token concepts.  Curl examples: ```bash curl -H \"X-Auth-Token: $TOKEN\" [...] curl -H \"Authorization: Bearer $TOKEN\" [...] curl -H \"Macaroon: $TOKEN\" [...]   # DEPRECATED ```   ### Passphrase authentication  The token authentication dependes on the Onezone service. In special cases - during Onezone deployment or its outage - it is necessary to use the local **emergency passphrase**.  The passphrase should be provided in a Basic authentication header with username `onepanel`. For curl users this means ```bash curl -u onepanel:TheEmergencyPassphrase ```  The passphrase can also be sent without any username, as the whole content of base64-encoded string in Basic authorization header, e.g. ```bash curl -H \"Authorization: Basic $(echo -n TheEmergencyPassphrase | base64)\" ```  The passphrase is set during deployment. It can be changed in the Onepanel GUI or with an API request: ```bash curl -X PUT 'https://$PANEL_HOST:9443/api/v3/onepanel/emergency_passphrase' \\ -u onepanel:TheEmergencyPassphrase -H 'Content-Type: application/json' \\ -d '{\"currentPassphrase\": \"TheEmergencyPassphrase\", \"newPassphrase\": \"TheNewPassphrase\"}' ```  ## API structure  The Onepanel API is structured to reflect that it can either be used to control **Onezone** or **Oneprovider** deployment, each Onedata component deployment has a separate Onepanel instance. In order to make the API calls explicit, **Onezone** or **Oneprovider** specific requests have different paths, i.e.:   * Onezone specific operations start with `/api/v3/onepanel/zone/`   * Oneprovider specific operations start with `/api/v3/onepanel/provider/`   * Common operations paths include `/api/v3/onepanel/users`,     `/api/v3/onepanel/hosts` and `/api/v3/onepanel/tasks`  The overall configuration of each component can be controlled by updating `/api/v3/onepanel/zone/configuration` and `/api/v3/onepanel/provider/configuration` resources.  ## Examples  Below are some example requests to Onepanel using cURL:  **Add storage resource to provider** ```bash curl -X POST -u onepanel:Passphrase1 -k -vvv -H \"content-type: application/json\" \\ -d '{\"NFS\": {\"type\": \"posix\", \"mountPoint\": \"/mnt/vfs\"}}' \\ https://172.17.0.4:9443/api/v3/onepanel/provider/storages ```  **Add a new Onezone worker** ```bash curl -X POST -u onepanel:Passphrase1 -k -vvv -H \"content-type: application/json\" \\ -d '{\"hosts\": [\"node1.p1.1.dev\"]}' \\ https://172.17.0.4:9443/api/v3/onepanel/zone/workers ```   # noqa: E501

    OpenAPI spec version: 21.02.3
    Contact: info@onedata.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from onepanel_client.api_client import ApiClient


class StoragesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_storage(self, body, **kwargs):  # noqa: E501
        """Add storage  # noqa: E501

        Adds additional storage resources to the provider.  ***Example cURL requests***  **Add storage** ```bash curl -H \"X-Auth-Token: $TOKEN\" -X POST https://$OP_PANEL_HOST/api/v3/onepanel/provider/storages \\ -H \"Content-Type: application/json\" -d '{     \"My S3 Storage\": {         \"type\": \"s3\",         \"hostname\": \"https://iam.example.com:443\",         \"bucketName\": \"bucket1.iam.example.com\",         \"skipStorageDetection\": true     },     \"My Posix Storage\": {         \"type\": \"posix\",         \"mountPoint\": \"/volumes/inexistent/path\"     } }'  {   \"My S3 Storage\": {       \"id\": \"f891d1ddf693232bbf0c11fe3cd9f7e7cheda9\"   },   \"My Posix Storage\": {       \"error\": {           \"id\": \"storageTestFailed\",           \"description\": \"Failed to write test file on storage.\",           \"details\": {               \"operation\": \"write\"           }       }   } } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_storage(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, StorageCreateDetails) body: The configuration details of storage resources to be added to the provider deployment. Must be an object with unique names for the storages as keys and their corresponding configuration (objects) as values - see the request body example.
 (required)
        :return: StorageCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_storage_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_storage_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def add_storage_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add storage  # noqa: E501

        Adds additional storage resources to the provider.  ***Example cURL requests***  **Add storage** ```bash curl -H \"X-Auth-Token: $TOKEN\" -X POST https://$OP_PANEL_HOST/api/v3/onepanel/provider/storages \\ -H \"Content-Type: application/json\" -d '{     \"My S3 Storage\": {         \"type\": \"s3\",         \"hostname\": \"https://iam.example.com:443\",         \"bucketName\": \"bucket1.iam.example.com\",         \"skipStorageDetection\": true     },     \"My Posix Storage\": {         \"type\": \"posix\",         \"mountPoint\": \"/volumes/inexistent/path\"     } }'  {   \"My S3 Storage\": {       \"id\": \"f891d1ddf693232bbf0c11fe3cd9f7e7cheda9\"   },   \"My Posix Storage\": {       \"error\": {           \"id\": \"storageTestFailed\",           \"description\": \"Failed to write test file on storage.\",           \"details\": {               \"operation\": \"write\"           }       }   } } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_storage_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, StorageCreateDetails) body: The configuration details of storage resources to be added to the provider deployment. Must be an object with unique names for the storages as keys and their corresponding configuration (objects) as values - see the request body example.
 (required)
        :return: StorageCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_storage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_storage`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key1', 'api_key2', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/provider/storages', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageCreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_storage_details(self, id, **kwargs):  # noqa: E501
        """Get storage details  # noqa: E501

        Returns the details of the selected storage.  ***Example cURL requests***  **Get Storage Details** ```bash curl -H \"X-Auth-Token: $TOKEN\" -X GET https:/$OP_PANEL_HOST/api/v3/onepanel/provider/storages/$STORAGE_ID  {     \"type\": \"s3\",     \"storagePathType\": \"flat\",     \"skipStorageDetection\": true,     \"signatureVersion\": 4,     \"scheme\": \"http\",     \"readonly\": false,     \"qosParameters\":{         \"storageId\": \"05b6c0a9b72e475c9d5061b0b7e16947chbcdc\",         \"providerId\": \"03c7e42a793912307b01b1bbb72a3a6bch4c1c\"     },     \"name\": \"My S3 Storage\",     \"maximumCanonicalObjectSize\": 67108864,     \"lumaFeed\": \"auto\",     \"importedStorage\": false,     \"id\": \"05b6c0a9b72e475c9d5061b0b7e16947chbcdc\",     \"hostname\": \"https://iam.exampele.com:443/\",     \"fileMode\": \"0664\",     \"dirMode\": \"0775\",     \"bucketName\": \"bucket1.iam.examplee.com\",     \"blockSize\": 10485760,     \"accessKey\": \"\" } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_storage_details(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a storage resource, which details should be returned.  (required)
        :return: StorageGetDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_storage_details_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_storage_details_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_storage_details_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get storage details  # noqa: E501

        Returns the details of the selected storage.  ***Example cURL requests***  **Get Storage Details** ```bash curl -H \"X-Auth-Token: $TOKEN\" -X GET https:/$OP_PANEL_HOST/api/v3/onepanel/provider/storages/$STORAGE_ID  {     \"type\": \"s3\",     \"storagePathType\": \"flat\",     \"skipStorageDetection\": true,     \"signatureVersion\": 4,     \"scheme\": \"http\",     \"readonly\": false,     \"qosParameters\":{         \"storageId\": \"05b6c0a9b72e475c9d5061b0b7e16947chbcdc\",         \"providerId\": \"03c7e42a793912307b01b1bbb72a3a6bch4c1c\"     },     \"name\": \"My S3 Storage\",     \"maximumCanonicalObjectSize\": 67108864,     \"lumaFeed\": \"auto\",     \"importedStorage\": false,     \"id\": \"05b6c0a9b72e475c9d5061b0b7e16947chbcdc\",     \"hostname\": \"https://iam.exampele.com:443/\",     \"fileMode\": \"0664\",     \"dirMode\": \"0775\",     \"bucketName\": \"bucket1.iam.examplee.com\",     \"blockSize\": 10485760,     \"accessKey\": \"\" } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_storage_details_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a storage resource, which details should be returned.  (required)
        :return: StorageGetDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_storage_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_storage_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key1', 'api_key2', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/provider/storages/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageGetDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_storages(self, **kwargs):  # noqa: E501
        """Get storages  # noqa: E501

        Returns the list of provider storage resources and their details.  ***Example cURL requests***  **Get provider storage ids** ```bash curl -H \"X-Auth-Token: $TOKEN\" -X GET https://$OP_PANEL_HOST/api/v3/onepanel/provider/storages  {     \"ids\": [         \"18a42a43b1b2d92455ffa09e9a15df7fch4f82\",         \"0a26877440f6ce457106c6958dfe7ecbch0ac6\",         \"b3d7d10504393556d9b1631a74c34520ch8359\"     ] } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_storages(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ProviderStorages
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_storages_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_storages_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_storages_with_http_info(self, **kwargs):  # noqa: E501
        """Get storages  # noqa: E501

        Returns the list of provider storage resources and their details.  ***Example cURL requests***  **Get provider storage ids** ```bash curl -H \"X-Auth-Token: $TOKEN\" -X GET https://$OP_PANEL_HOST/api/v3/onepanel/provider/storages  {     \"ids\": [         \"18a42a43b1b2d92455ffa09e9a15df7fch4f82\",         \"0a26877440f6ce457106c6958dfe7ecbch0ac6\",         \"b3d7d10504393556d9b1631a74c34520ch8359\"     ] } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_storages_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ProviderStorages
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_storages" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key1', 'api_key2', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/provider/storages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProviderStorages',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_storage(self, body, id, **kwargs):  # noqa: E501
        """Modify storage config  # noqa: E501

        Modifies storage configuration.  ***Example cURL requests***  **Modify storage name. Notice, that current storage name is the map key.** ```bash curl -H \"X-Auth-Token: $TOKEN\" -X PATCH https://$OP_PANEL_HOST/api/v3/onepanel/provider/storages/$STORAGE_ID \\ -H \"Content-Type: application/json\" -d '{     \"My S3 Storage\": {         \"type\":\"s3\",         \"name\": \"My S3 Storage Updated\"     } }'  {     \"type\": \"s3\",     \"storagePathType\": \"flat\",     \"skipStorageDetection\": \"true\",     \"signatureVersion\": \"4\",     \"scheme\": \"http\",     \"readonly\": false,     \"qosParameters\": {         \"storageId\": \"2456aa013af797dbef27743790a5f12cche680\",         \"providerId\": \"03c7e42a793912307b01b1bbb72a3a6bch4c1c\"     },     \"name\": \"My S3 Storage Updated\",     \"maximumCanonicalObjectSize\": \"67108864\",     \"lumaFeed\": \"auto\",     \"importedStorage\": false,     \"id\": \"2456aa013af797dbef27743790a5f12cche680\",     \"hostname\": \"https://iam.exampele.com:443/\",     \"fileMode\": \"0664\",     \"dirMode\": \"0775\",     \"bucketName\": \"bucket1.iam.examplee.com\",     \"blockSize\": \"10485760\",     \"accessKey\": \"\" } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_storage(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, StorageModifyDetails) body: An object with one key - the current name of the storage that is being modified - and its value set to an object with updated parameters.
 (required)
        :param str id: The Id of the storage resource which details should be modified.  (required)
        :return: StorageModifyDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modify_storage_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_storage_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def modify_storage_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Modify storage config  # noqa: E501

        Modifies storage configuration.  ***Example cURL requests***  **Modify storage name. Notice, that current storage name is the map key.** ```bash curl -H \"X-Auth-Token: $TOKEN\" -X PATCH https://$OP_PANEL_HOST/api/v3/onepanel/provider/storages/$STORAGE_ID \\ -H \"Content-Type: application/json\" -d '{     \"My S3 Storage\": {         \"type\":\"s3\",         \"name\": \"My S3 Storage Updated\"     } }'  {     \"type\": \"s3\",     \"storagePathType\": \"flat\",     \"skipStorageDetection\": \"true\",     \"signatureVersion\": \"4\",     \"scheme\": \"http\",     \"readonly\": false,     \"qosParameters\": {         \"storageId\": \"2456aa013af797dbef27743790a5f12cche680\",         \"providerId\": \"03c7e42a793912307b01b1bbb72a3a6bch4c1c\"     },     \"name\": \"My S3 Storage Updated\",     \"maximumCanonicalObjectSize\": \"67108864\",     \"lumaFeed\": \"auto\",     \"importedStorage\": false,     \"id\": \"2456aa013af797dbef27743790a5f12cche680\",     \"hostname\": \"https://iam.exampele.com:443/\",     \"fileMode\": \"0664\",     \"dirMode\": \"0775\",     \"bucketName\": \"bucket1.iam.examplee.com\",     \"blockSize\": \"10485760\",     \"accessKey\": \"\" } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_storage_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, StorageModifyDetails) body: An object with one key - the current name of the storage that is being modified - and its value set to an object with updated parameters.
 (required)
        :param str id: The Id of the storage resource which details should be modified.  (required)
        :return: StorageModifyDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_storage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_storage`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `modify_storage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key1', 'api_key2', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/provider/storages/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageModifyDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_storage(self, id, **kwargs):  # noqa: E501
        """Remove storage  # noqa: E501

        Removes storage from the cluster. Only storage not supporting any spaces can be removed.  ***Example cURL requests***  **Remove storage** ```bash curl -H \"X-Auth-Token: $TOKEN\" -X DELETE https://$OP_PANEL_HOST/api/v3/onepanel/provider/storages/$STORAGE_ID ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_storage(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of the storage to remove. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_storage_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_storage_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def remove_storage_with_http_info(self, id, **kwargs):  # noqa: E501
        """Remove storage  # noqa: E501

        Removes storage from the cluster. Only storage not supporting any spaces can be removed.  ***Example cURL requests***  **Remove storage** ```bash curl -H \"X-Auth-Token: $TOKEN\" -X DELETE https://$OP_PANEL_HOST/api/v3/onepanel/provider/storages/$STORAGE_ID ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_storage_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of the storage to remove. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_storage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_storage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key1', 'api_key2', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/provider/storages/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
