# coding: utf-8

"""
    Onepanel

    # Overview  This is the RESTful API definition of **Onepanel** component of Onedata data management system [onedata.org](http://onedata.org).  > This API is defined using [Swagger](http://swagger.io/), the JSON specification can be used to automatically generate client libraries -   [swagger.json](../../../swagger/onepanel/swagger.json).  This API allows control and configuration of local Onedata deployment, in particular full control over the **Onezone** and **Oneprovider** services and their distribution and monitoring on the local resources.  The API is grouped into 3 categories of operations:   * **Onepanel** - for common operations   * **Oneprovider** - for Oneprovider specific administrative operations   * **Onezone** - for Onezone specific administrative operations  Each of these components is composed of the following services:   * **Worker services** - these are available under `/zone/workers` and     `/provider/workers` paths,   * **Databases services** - each Onedata component stores it's metadata in a     Couchbase backend, which can be distributed on any number of nodes, these     are available under `/zone/databases` and `/provider/databases` paths,   * **Cluster manager services** - this is a service which controls other     deployed processes in one site, these are availables under these are     available under `/zone/managers` and `/provider/managers` paths.  **Onezone** and **Oneprovider** components are composed of 3 types of services: **managers**, **databases** and **workers**.  Using this API each of these components can be deployed, configured, started and stopped on a specified host in the local site, in the context of either **Onezone** or **Oneprovider** service.  All paths listed in this documentation are relative to the base Onepanel REST API which is `/api/v3/onepanel`, so complete URL for a request to Onepanel service is:  ``` http://HOSTNAME:PORT/api/v3/onepanel/... ```  ## Authentication  ### Token authentication  The recommended, safest way of authenticating requests to Onepanel API is using the **Onedata access tokens**. The token should be present in `X-Auth-Token` or `Authorization: Bearer` header. See [Onezone documentation](/#/home/api/latest/onezone?anchor=section/Overview/Authentication-and-authorization) for detailed explanation of the token concepts.  Curl examples: ```bash curl -H \"X-Auth-Token: $TOKEN\" [...] curl -H \"Authorization: Bearer $TOKEN\" [...] curl -H \"Macaroon: $TOKEN\" [...]   # DEPRECATED ```   ### Passphrase authentication  The token authentication dependes on the Onezone service. In special cases - during Onezone deployment or its outage - it is necessary to use the local **emergency passphrase**.  The passphrase should be provided in a Basic authentication header with username `onepanel`. For curl users this means ```bash curl -u onepanel:TheEmergencyPassphrase ```  The passphrase can also be sent without any username, as the whole content of base64-encoded string in Basic authorization header, e.g. ```bash curl -H \"Authorization: Basic $(echo -n TheEmergencyPassphrase | base64)\" ```  The passphrase is set during deployment. It can be changed in the Onepanel GUI or with an API request: ```bash curl -X PUT 'https://$PANEL_HOST:9443/api/v3/onepanel/emergency_passphrase' \\ -u onepanel:TheEmergencyPassphrase -H 'Content-Type: application/json' \\ -d '{\"currentPassphrase\": \"TheEmergencyPassphrase\", \"newPassphrase\": \"TheNewPassphrase\"}' ```  ## API structure  The Onepanel API is structured to reflect that it can either be used to control **Onezone** or **Oneprovider** deployment, each Onedata component deployment has a separate Onepanel instance. In order to make the API calls explicit, **Onezone** or **Oneprovider** specific requests have different paths, i.e.:   * Onezone specific operations start with `/api/v3/onepanel/zone/`   * Oneprovider specific operations start with `/api/v3/onepanel/provider/`   * Common operations paths include `/api/v3/onepanel/users`,     `/api/v3/onepanel/hosts` and `/api/v3/onepanel/tasks`  The overall configuration of each component can be controlled by updating `/api/v3/onepanel/zone/configuration` and `/api/v3/onepanel/provider/configuration` resources.  ## Examples  Below are some example requests to Onepanel using cURL:  **Add storage resource to provider** ```bash curl -X POST -u onepanel:Passphrase1 -k -vvv -H \"content-type: application/json\" \\ -d '{\"NFS\": {\"type\": \"posix\", \"mountPoint\": \"/mnt/vfs\"}}' \\ https://172.17.0.4:9443/api/v3/onepanel/provider/storages ```  **Add a new Onezone worker** ```bash curl -X POST -u onepanel:Passphrase1 -k -vvv -H \"content-type: application/json\" \\ -d '{\"hosts\": [\"node1.p1.1.dev\"]}' \\ https://172.17.0.4:9443/api/v3/onepanel/zone/workers ```   # noqa: E501

    OpenAPI spec version: 21.02.3
    Contact: info@onedata.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from onepanel_client.api_client import ApiClient


class SpaceSupportApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_provider_spaces(self, **kwargs):  # noqa: E501
        """Get provider spaces  # noqa: E501

        Returns the list of spaces supported by the provider.  ***Example cURL requests***  **Get provider space ids** ```bash curl -H \"X-Auth-Token: $TOKEN\" -X GET https://$OP_PANEL_HOST/api/v3/onepanel/provider/spaces  {     \"ids\": [         \"0614a7a1512271ceeae95539872eeeabched69\",         \"06911eba60e6ba947f86f799ce975042chad21\",         \"109b7d84c00cd45a88b6cdb852dba5b3ch84db\"     ] } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_provider_spaces(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ProviderSpaces
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_provider_spaces_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_provider_spaces_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_provider_spaces_with_http_info(self, **kwargs):  # noqa: E501
        """Get provider spaces  # noqa: E501

        Returns the list of spaces supported by the provider.  ***Example cURL requests***  **Get provider space ids** ```bash curl -H \"X-Auth-Token: $TOKEN\" -X GET https://$OP_PANEL_HOST/api/v3/onepanel/provider/spaces  {     \"ids\": [         \"0614a7a1512271ceeae95539872eeeabched69\",         \"06911eba60e6ba947f86f799ce975042chad21\",         \"109b7d84c00cd45a88b6cdb852dba5b3ch84db\"     ] } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_provider_spaces_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ProviderSpaces
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_provider_spaces" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key1', 'api_key2', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/provider/spaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProviderSpaces',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_space_details(self, id, **kwargs):  # noqa: E501
        """Get space details  # noqa: E501

        Returns details of space specified by space Id in the path.  ***Example cURL requests***  **Get space details** ```bash curl -H \"X-Auth-Token: $TOKEN\" -X GET https://$OP_PANEL_HOST/api/v3/onepanel/provider/spaces/$SPACE_ID  {     \"supportingProviders\": {         \"03c7e42a793912307b01b1bbb72a3a6bch4c1c\": 10000000     },     \"storageId\": \"18a42a43b1b2d92455ffa09e9a15df7fch4f82\",     \"spaceOccupancy\": 0,     \"name\": \"someSpace\",     \"localStorages\": [\"18a42a43b1b2d92455ffa09e9a15df7fch4f82\"],     \"importedStorage\": false,     \"id\": \"16403a6c45105010dc7103e31874cb3echac41\",     \"accountingEnabled\": false,     \"dirStatsServiceEnabled\": true,     \"dirStatsServiceStatus\": \"initializing\" } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_space_details(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a space which details should be returned. (required)
        :return: SpaceDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_space_details_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_space_details_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_space_details_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get space details  # noqa: E501

        Returns details of space specified by space Id in the path.  ***Example cURL requests***  **Get space details** ```bash curl -H \"X-Auth-Token: $TOKEN\" -X GET https://$OP_PANEL_HOST/api/v3/onepanel/provider/spaces/$SPACE_ID  {     \"supportingProviders\": {         \"03c7e42a793912307b01b1bbb72a3a6bch4c1c\": 10000000     },     \"storageId\": \"18a42a43b1b2d92455ffa09e9a15df7fch4f82\",     \"spaceOccupancy\": 0,     \"name\": \"someSpace\",     \"localStorages\": [\"18a42a43b1b2d92455ffa09e9a15df7fch4f82\"],     \"importedStorage\": false,     \"id\": \"16403a6c45105010dc7103e31874cb3echac41\",     \"accountingEnabled\": false,     \"dirStatsServiceEnabled\": true,     \"dirStatsServiceStatus\": \"initializing\" } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_space_details_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a space which details should be returned. (required)
        :return: SpaceDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_space_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_space_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key1', 'api_key2', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/provider/spaces/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SpaceDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_space(self, body, id, **kwargs):  # noqa: E501
        """Modify space details  # noqa: E501

        Modifies the space import/update strategies.  ***Example cURL requests***  **Modify space support size** ```bash curl -H \"X-Auth-Token: $TOKEN\" -X PATCH https://$OP_PANEL_HOST/api/v3/onepanel/provider/spaces/$SPACE_ID \\ -H \"Content-Type: application/json\" -d '{\"size\": \"30000000\"}' ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_space(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SpaceModifyRequest body: (required)
        :param str id: The Id of a space which details should be modified. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modify_space_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_space_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def modify_space_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Modify space details  # noqa: E501

        Modifies the space import/update strategies.  ***Example cURL requests***  **Modify space support size** ```bash curl -H \"X-Auth-Token: $TOKEN\" -X PATCH https://$OP_PANEL_HOST/api/v3/onepanel/provider/spaces/$SPACE_ID \\ -H \"Content-Type: application/json\" -d '{\"size\": \"30000000\"}' ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_space_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SpaceModifyRequest body: (required)
        :param str id: The Id of a space which details should be modified. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_space" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_space`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `modify_space`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key1', 'api_key2', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/provider/spaces/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revoke_space_support(self, id, **kwargs):  # noqa: E501
        """Revoke space support for a space  # noqa: E501

        Allows provider to revoke storage support for a specific space. Users with access to this space will no longer be able to store data on the resources of this provider.  ***Example cURL requests***  **Revoke space support** ```bash curl -H \"X-Auth-Token: $TOKEN\" -X DELETE https://$OP_PANEL_HOST/api/v3/onepanel/provider/spaces/$SPACE_ID ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revoke_space_support(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a space to be removed. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.revoke_space_support_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.revoke_space_support_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def revoke_space_support_with_http_info(self, id, **kwargs):  # noqa: E501
        """Revoke space support for a space  # noqa: E501

        Allows provider to revoke storage support for a specific space. Users with access to this space will no longer be able to store data on the resources of this provider.  ***Example cURL requests***  **Revoke space support** ```bash curl -H \"X-Auth-Token: $TOKEN\" -X DELETE https://$OP_PANEL_HOST/api/v3/onepanel/provider/spaces/$SPACE_ID ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revoke_space_support_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a space to be removed. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revoke_space_support" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `revoke_space_support`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key1', 'api_key2', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/provider/spaces/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def support_space(self, body, **kwargs):  # noqa: E501
        """Support space  # noqa: E501

        Supports an existing space.  ***Example cURL requests***  **Support space** ```bash curl -H \"X-Auth-Token: $TOKEN\" -X POST https://$OP_PANEL_HOST/api/v3/onepanel/provider/spaces \\ -H \"Content-Type: application/json\" -d '{     \"token\": \"MDAU02QHLaaJ00go\",     \"size\": \"10000000\",     \"storageId\": \"18a42a43b1b2d9e9a1f82\" }'  {     \"id\": \"16403a6c45105010dc7103e31874cb3echac41\" } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.support_space(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SpaceSupportRequest body: Specification of the space support request including support size and token.
 (required)
        :return: Id
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.support_space_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.support_space_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def support_space_with_http_info(self, body, **kwargs):  # noqa: E501
        """Support space  # noqa: E501

        Supports an existing space.  ***Example cURL requests***  **Support space** ```bash curl -H \"X-Auth-Token: $TOKEN\" -X POST https://$OP_PANEL_HOST/api/v3/onepanel/provider/spaces \\ -H \"Content-Type: application/json\" -d '{     \"token\": \"MDAU02QHLaaJ00go\",     \"size\": \"10000000\",     \"storageId\": \"18a42a43b1b2d9e9a1f82\" }'  {     \"id\": \"16403a6c45105010dc7103e31874cb3echac41\" } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.support_space_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SpaceSupportRequest body: Specification of the space support request including support size and token.
 (required)
        :return: Id
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method support_space" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `support_space`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key1', 'api_key2', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/provider/spaces', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Id',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
