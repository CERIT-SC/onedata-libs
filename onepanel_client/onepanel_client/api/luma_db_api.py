# coding: utf-8

"""
    Onepanel

    # Overview  This is the RESTful API definition of **Onepanel** component of Onedata data management system [onedata.org](http://onedata.org).  > This API is defined using [Swagger](http://swagger.io/), the JSON specification can be used to automatically generate client libraries -   [swagger.json](../../../swagger/onepanel/swagger.json).  This API allows control and configuration of local Onedata deployment, in particular full control over the **Onezone** and **Oneprovider** services and their distribution and monitoring on the local resources.  The API is grouped into 3 categories of operations:   * **Onepanel** - for common operations   * **Oneprovider** - for Oneprovider specific administrative operations   * **Onezone** - for Onezone specific administrative operations  Each of these components is composed of the following services:   * **Worker services** - these are available under `/zone/workers` and     `/provider/workers` paths,   * **Databases services** - each Onedata component stores it's metadata in a     Couchbase backend, which can be distributed on any number of nodes, these     are available under `/zone/databases` and `/provider/databases` paths,   * **Cluster manager services** - this is a service which controls other     deployed processes in one site, these are availables under these are     available under `/zone/managers` and `/provider/managers` paths.  **Onezone** and **Oneprovider** components are composed of 3 types of services: **managers**, **databases** and **workers**.  Using this API each of these components can be deployed, configured, started and stopped on a specified host in the local site, in the context of either **Onezone** or **Oneprovider** service.  All paths listed in this documentation are relative to the base Onepanel REST API which is `/api/v3/onepanel`, so complete URL for a request to Onepanel service is:  ``` http://HOSTNAME:PORT/api/v3/onepanel/... ```  ## Authentication  ### Token authentication  The recommended, safest way of authenticating requests to Onepanel API is using the **Onedata access tokens**. The token should be present in `X-Auth-Token` or `Authorization: Bearer` header. See [Onezone documentation](/#/home/api/latest/onezone?anchor=section/Overview/Authentication-and-authorization) for detailed explanation of the token concepts.  Curl examples: ```bash curl -H \"X-Auth-Token: $TOKEN\" [...] curl -H \"Authorization: Bearer $TOKEN\" [...] curl -H \"Macaroon: $TOKEN\" [...]   # DEPRECATED ```   ### Passphrase authentication  The token authentication dependes on the Onezone service. In special cases - during Onezone deployment or its outage - it is necessary to use the local **emergency passphrase**.  The passphrase should be provided in a Basic authentication header with username `onepanel`. For curl users this means ```bash curl -u onepanel:TheEmergencyPassphrase ```  The passphrase can also be sent without any username, as the whole content of base64-encoded string in Basic authorization header, e.g. ```bash curl -H \"Authorization: Basic $(echo -n TheEmergencyPassphrase | base64)\" ```  The passphrase is set during deployment. It can be changed in the Onepanel GUI or with an API request: ```bash curl -X PUT 'https://$PANEL_HOST:9443/api/v3/onepanel/emergency_passphrase' \\ -u onepanel:TheEmergencyPassphrase -H 'Content-Type: application/json' \\ -d '{\"currentPassphrase\": \"TheEmergencyPassphrase\", \"newPassphrase\": \"TheNewPassphrase\"}' ```  ## API structure  The Onepanel API is structured to reflect that it can either be used to control **Onezone** or **Oneprovider** deployment, each Onedata component deployment has a separate Onepanel instance. In order to make the API calls explicit, **Onezone** or **Oneprovider** specific requests have different paths, i.e.:   * Onezone specific operations start with `/api/v3/onepanel/zone/`   * Oneprovider specific operations start with `/api/v3/onepanel/provider/`   * Common operations paths include `/api/v3/onepanel/users`,     `/api/v3/onepanel/hosts` and `/api/v3/onepanel/tasks`  The overall configuration of each component can be controlled by updating `/api/v3/onepanel/zone/configuration` and `/api/v3/onepanel/provider/configuration` resources.  ## Examples  Below are some example requests to Onepanel using cURL:  **Add storage resource to provider** ```bash curl -X POST -u onepanel:Passphrase1 -k -vvv -H \"content-type: application/json\" \\ -d '{\"NFS\": {\"type\": \"posix\", \"mountPoint\": \"/mnt/vfs\"}}' \\ https://172.17.0.4:9443/api/v3/onepanel/provider/storages ```  **Add a new Onezone worker** ```bash curl -X POST -u onepanel:Passphrase1 -k -vvv -H \"content-type: application/json\" \\ -d '{\"hosts\": [\"node1.p1.1.dev\"]}' \\ https://172.17.0.4:9443/api/v3/onepanel/zone/workers ```   # noqa: E501

    OpenAPI spec version: 21.02.3
    Contact: info@onedata.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from onepanel_client.api_client import ApiClient


class LUMADBApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def luma_clear_db(self, id, **kwargs):  # noqa: E501
        """Clear LUMA DB  # noqa: E501

        Clears all LUMA DB entries for given storage. LUMA DB will be repopulated using currently setup feed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.luma_clear_db(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a storage for which LUMA DB will be cleared (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.luma_clear_db_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.luma_clear_db_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def luma_clear_db_with_http_info(self, id, **kwargs):  # noqa: E501
        """Clear LUMA DB  # noqa: E501

        Clears all LUMA DB entries for given storage. LUMA DB will be repopulated using currently setup feed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.luma_clear_db_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a storage for which LUMA DB will be cleared (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method luma_clear_db" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `luma_clear_db`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key1', 'api_key2', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/provider/storages/{id}/luma/db', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def luma_get_acl_group_to_onedata_group_mapping(self, id, groupname, **kwargs):  # noqa: E501
        """Lookup mapping of ACL group  # noqa: E501

        Returns mapping of ACL group on the specific storage to Onedata group stored in LUMA DB. This endpoint is relevant **only for POSIX compatible storages**.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.luma_get_acl_group_to_onedata_group_mapping(id, groupname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a storage constituting space support for which onedata group mapping should be returned.  (required)
        :param int groupname: The ACL name of the group on the storage.  (required)
        :return: LumaOnedataGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.luma_get_acl_group_to_onedata_group_mapping_with_http_info(id, groupname, **kwargs)  # noqa: E501
        else:
            (data) = self.luma_get_acl_group_to_onedata_group_mapping_with_http_info(id, groupname, **kwargs)  # noqa: E501
            return data

    def luma_get_acl_group_to_onedata_group_mapping_with_http_info(self, id, groupname, **kwargs):  # noqa: E501
        """Lookup mapping of ACL group  # noqa: E501

        Returns mapping of ACL group on the specific storage to Onedata group stored in LUMA DB. This endpoint is relevant **only for POSIX compatible storages**.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.luma_get_acl_group_to_onedata_group_mapping_with_http_info(id, groupname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a storage constituting space support for which onedata group mapping should be returned.  (required)
        :param int groupname: The ACL name of the group on the storage.  (required)
        :return: LumaOnedataGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'groupname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method luma_get_acl_group_to_onedata_group_mapping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `luma_get_acl_group_to_onedata_group_mapping`")  # noqa: E501
        # verify the required parameter 'groupname' is set
        if ('groupname' not in params or
                params['groupname'] is None):
            raise ValueError("Missing the required parameter `groupname` when calling `luma_get_acl_group_to_onedata_group_mapping`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'groupname' in params:
            path_params['groupname'] = params['groupname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key1', 'api_key2', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/provider/storages/{id}/luma/db/storage_import/posix_compatible/acl_group_to_onedata_group/{groupname}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LumaOnedataGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def luma_get_acl_user_to_onedata_user_mapping(self, id, username, **kwargs):  # noqa: E501
        """Lookup mapping of ACL user  # noqa: E501

        Returns mapping of ACL user on the specific storage to Onedata user stored in LUMA DB. Mapping will be acquired again using currently setup LUMA feed. This endpoint is relevant **only for POSIX compatible storages**.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.luma_get_acl_user_to_onedata_user_mapping(id, username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a storage constituting space support for which onedata user mapping should be returned.  (required)
        :param int username: The ACL name of the user on the storage.  (required)
        :return: LumaOnedataUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.luma_get_acl_user_to_onedata_user_mapping_with_http_info(id, username, **kwargs)  # noqa: E501
        else:
            (data) = self.luma_get_acl_user_to_onedata_user_mapping_with_http_info(id, username, **kwargs)  # noqa: E501
            return data

    def luma_get_acl_user_to_onedata_user_mapping_with_http_info(self, id, username, **kwargs):  # noqa: E501
        """Lookup mapping of ACL user  # noqa: E501

        Returns mapping of ACL user on the specific storage to Onedata user stored in LUMA DB. Mapping will be acquired again using currently setup LUMA feed. This endpoint is relevant **only for POSIX compatible storages**.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.luma_get_acl_user_to_onedata_user_mapping_with_http_info(id, username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a storage constituting space support for which onedata user mapping should be returned.  (required)
        :param int username: The ACL name of the user on the storage.  (required)
        :return: LumaOnedataUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method luma_get_acl_user_to_onedata_user_mapping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `luma_get_acl_user_to_onedata_user_mapping`")  # noqa: E501
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `luma_get_acl_user_to_onedata_user_mapping`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key1', 'api_key2', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/provider/storages/{id}/luma/db/storage_import/posix_compatible/acl_user_to_onedata_user/{username}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LumaOnedataUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def luma_get_config(self, id, **kwargs):  # noqa: E501
        """Get LUMA DB configuration  # noqa: E501

        Returns configuration of Local User Mapping database (LUMA DB) for the storage.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.luma_get_config(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a storage for which LUMA DB configuration should be returned. (required)
        :return: LumaConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.luma_get_config_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.luma_get_config_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def luma_get_config_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get LUMA DB configuration  # noqa: E501

        Returns configuration of Local User Mapping database (LUMA DB) for the storage.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.luma_get_config_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a storage for which LUMA DB configuration should be returned. (required)
        :return: LumaConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method luma_get_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `luma_get_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key1', 'api_key2', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/provider/storages/{id}/luma/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LumaConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def luma_get_default_posix_credentials(self, id, space_id, **kwargs):  # noqa: E501
        """Lookup default posix credentials  # noqa: E501

        Returns default storage credentials for the space supported by POSIX-compatible storage that are stored in LUMA DB. GID will be used as a component of storage credentials for each member of the space. Both UID and GID will be used as to represent owner of the space directory on storage. This endpoint is relevant **only for POSIX compatible storages**.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.luma_get_default_posix_credentials(id, space_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a storage constituting space support for which default storage credentials should be returned.  (required)
        :param str space_id: The Id of a space constituting space support for which default storage credentials should be returned.  (required)
        :return: PosixCompatibleCredentials
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.luma_get_default_posix_credentials_with_http_info(id, space_id, **kwargs)  # noqa: E501
        else:
            (data) = self.luma_get_default_posix_credentials_with_http_info(id, space_id, **kwargs)  # noqa: E501
            return data

    def luma_get_default_posix_credentials_with_http_info(self, id, space_id, **kwargs):  # noqa: E501
        """Lookup default posix credentials  # noqa: E501

        Returns default storage credentials for the space supported by POSIX-compatible storage that are stored in LUMA DB. GID will be used as a component of storage credentials for each member of the space. Both UID and GID will be used as to represent owner of the space directory on storage. This endpoint is relevant **only for POSIX compatible storages**.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.luma_get_default_posix_credentials_with_http_info(id, space_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a storage constituting space support for which default storage credentials should be returned.  (required)
        :param str space_id: The Id of a space constituting space support for which default storage credentials should be returned.  (required)
        :return: PosixCompatibleCredentials
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'space_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method luma_get_default_posix_credentials" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `luma_get_default_posix_credentials`")  # noqa: E501
        # verify the required parameter 'space_id' is set
        if ('space_id' not in params or
                params['space_id'] is None):
            raise ValueError("Missing the required parameter `space_id` when calling `luma_get_default_posix_credentials`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'space_id' in params:
            path_params['space_id'] = params['space_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key1', 'api_key2', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/provider/storages/{id}/luma/db/storage_access/posix_compatible/default_credentials/{space_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PosixCompatibleCredentials',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def luma_get_display_credentials(self, id, space_id, **kwargs):  # noqa: E501
        """Lookup default display credentials  # noqa: E501

        Returns default display credentials for the space support that are stored in LUMA DB. These are POSIX credentials (UID & GID) which are returned in getattr response. They are used to present file owners in the result of e.g. `ls` or `stat` operation in Oneclient or when fetching file attributes via REST API.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.luma_get_display_credentials(id, space_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a storage constituting space support for which default display credentials should be returned.  (required)
        :param str space_id: The Id of a space constituting space support for which default display credentials should be returned.  (required)
        :return: PosixCompatibleCredentials
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.luma_get_display_credentials_with_http_info(id, space_id, **kwargs)  # noqa: E501
        else:
            (data) = self.luma_get_display_credentials_with_http_info(id, space_id, **kwargs)  # noqa: E501
            return data

    def luma_get_display_credentials_with_http_info(self, id, space_id, **kwargs):  # noqa: E501
        """Lookup default display credentials  # noqa: E501

        Returns default display credentials for the space support that are stored in LUMA DB. These are POSIX credentials (UID & GID) which are returned in getattr response. They are used to present file owners in the result of e.g. `ls` or `stat` operation in Oneclient or when fetching file attributes via REST API.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.luma_get_display_credentials_with_http_info(id, space_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a storage constituting space support for which default display credentials should be returned.  (required)
        :param str space_id: The Id of a space constituting space support for which default display credentials should be returned.  (required)
        :return: PosixCompatibleCredentials
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'space_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method luma_get_display_credentials" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `luma_get_display_credentials`")  # noqa: E501
        # verify the required parameter 'space_id' is set
        if ('space_id' not in params or
                params['space_id'] is None):
            raise ValueError("Missing the required parameter `space_id` when calling `luma_get_display_credentials`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'space_id' in params:
            path_params['space_id'] = params['space_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key1', 'api_key2', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/provider/storages/{id}/luma/db/display_credentials/all/default/{space_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PosixCompatibleCredentials',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def luma_get_onedata_user_to_credentials_mapping(self, id, onedata_user_id, **kwargs):  # noqa: E501
        """Lookup Onedata user to credentials mapping  # noqa: E501

        Returns mapping of the Onedata user to user on the specific storage stored in LUMA DB.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.luma_get_onedata_user_to_credentials_mapping(id, onedata_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a storage for which user mapping should be returned.  (required)
        :param str onedata_user_id: The Id of a user for which mapping should be returned.  (required)
        :return: LumaStorageUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.luma_get_onedata_user_to_credentials_mapping_with_http_info(id, onedata_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.luma_get_onedata_user_to_credentials_mapping_with_http_info(id, onedata_user_id, **kwargs)  # noqa: E501
            return data

    def luma_get_onedata_user_to_credentials_mapping_with_http_info(self, id, onedata_user_id, **kwargs):  # noqa: E501
        """Lookup Onedata user to credentials mapping  # noqa: E501

        Returns mapping of the Onedata user to user on the specific storage stored in LUMA DB.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.luma_get_onedata_user_to_credentials_mapping_with_http_info(id, onedata_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a storage for which user mapping should be returned.  (required)
        :param str onedata_user_id: The Id of a user for which mapping should be returned.  (required)
        :return: LumaStorageUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'onedata_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method luma_get_onedata_user_to_credentials_mapping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `luma_get_onedata_user_to_credentials_mapping`")  # noqa: E501
        # verify the required parameter 'onedata_user_id' is set
        if ('onedata_user_id' not in params or
                params['onedata_user_id'] is None):
            raise ValueError("Missing the required parameter `onedata_user_id` when calling `luma_get_onedata_user_to_credentials_mapping`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'onedata_user_id' in params:
            path_params['onedata_user_id'] = params['onedata_user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key1', 'api_key2', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/provider/storages/{id}/luma/db/storage_access/all/onedata_user_to_credentials/{onedata_user_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LumaStorageUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def luma_get_uid_to_onedata_user_mapping(self, id, uid, **kwargs):  # noqa: E501
        """Lookup mapping of UID  # noqa: E501

        Returns mapping of UID on the specific storage to Onedata user stored in LUMA DB. Mapping will be acquired again using currently setup LUMA feed. This endpoint is relevant **only for POSIX compatible storages**.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.luma_get_uid_to_onedata_user_mapping(id, uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a storage constituting space support for which onedata user mapping should be returned.  (required)
        :param int uid: The UID of the user on the storage.  (required)
        :return: LumaOnedataUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.luma_get_uid_to_onedata_user_mapping_with_http_info(id, uid, **kwargs)  # noqa: E501
        else:
            (data) = self.luma_get_uid_to_onedata_user_mapping_with_http_info(id, uid, **kwargs)  # noqa: E501
            return data

    def luma_get_uid_to_onedata_user_mapping_with_http_info(self, id, uid, **kwargs):  # noqa: E501
        """Lookup mapping of UID  # noqa: E501

        Returns mapping of UID on the specific storage to Onedata user stored in LUMA DB. Mapping will be acquired again using currently setup LUMA feed. This endpoint is relevant **only for POSIX compatible storages**.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.luma_get_uid_to_onedata_user_mapping_with_http_info(id, uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a storage constituting space support for which onedata user mapping should be returned.  (required)
        :param int uid: The UID of the user on the storage.  (required)
        :return: LumaOnedataUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method luma_get_uid_to_onedata_user_mapping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `luma_get_uid_to_onedata_user_mapping`")  # noqa: E501
        # verify the required parameter 'uid' is set
        if ('uid' not in params or
                params['uid'] is None):
            raise ValueError("Missing the required parameter `uid` when calling `luma_get_uid_to_onedata_user_mapping`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key1', 'api_key2', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/provider/storages/{id}/luma/db/storage_import/posix_compatible/uid_to_onedata_user/{uid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LumaOnedataUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def luma_remove_acl_group_to_onedata_group_mapping(self, id, groupname, **kwargs):  # noqa: E501
        """Remove mapping of ACL group  # noqa: E501

        Removes mapping of ACL group on the specific storage to Onedata group from LUMA DB. Mapping will be acquired again using currently setup LUMA feed. This endpoint is relevant **only for POSIX compatible storages**.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.luma_remove_acl_group_to_onedata_group_mapping(id, groupname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a storage constituting space support for which onedata group mapping should be removed.  (required)
        :param int groupname: The ACL name of the group on the storage.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.luma_remove_acl_group_to_onedata_group_mapping_with_http_info(id, groupname, **kwargs)  # noqa: E501
        else:
            (data) = self.luma_remove_acl_group_to_onedata_group_mapping_with_http_info(id, groupname, **kwargs)  # noqa: E501
            return data

    def luma_remove_acl_group_to_onedata_group_mapping_with_http_info(self, id, groupname, **kwargs):  # noqa: E501
        """Remove mapping of ACL group  # noqa: E501

        Removes mapping of ACL group on the specific storage to Onedata group from LUMA DB. Mapping will be acquired again using currently setup LUMA feed. This endpoint is relevant **only for POSIX compatible storages**.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.luma_remove_acl_group_to_onedata_group_mapping_with_http_info(id, groupname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a storage constituting space support for which onedata group mapping should be removed.  (required)
        :param int groupname: The ACL name of the group on the storage.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'groupname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method luma_remove_acl_group_to_onedata_group_mapping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `luma_remove_acl_group_to_onedata_group_mapping`")  # noqa: E501
        # verify the required parameter 'groupname' is set
        if ('groupname' not in params or
                params['groupname'] is None):
            raise ValueError("Missing the required parameter `groupname` when calling `luma_remove_acl_group_to_onedata_group_mapping`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'groupname' in params:
            path_params['groupname'] = params['groupname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key1', 'api_key2', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/provider/storages/{id}/luma/db/storage_import/posix_compatible/acl_group_to_onedata_group/{groupname}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def luma_remove_acl_user_to_onedata_user_mapping(self, id, username, **kwargs):  # noqa: E501
        """Remove mapping of ACL user  # noqa: E501

        Removes mapping of ACL user on the specific storage to Onedata user from LUMA DB. This endpoint is relevant **only for POSIX compatible storages**.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.luma_remove_acl_user_to_onedata_user_mapping(id, username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a storage constituting space support for which onedata user mapping should be removed.  (required)
        :param int username: The ACL name of the user on the storage.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.luma_remove_acl_user_to_onedata_user_mapping_with_http_info(id, username, **kwargs)  # noqa: E501
        else:
            (data) = self.luma_remove_acl_user_to_onedata_user_mapping_with_http_info(id, username, **kwargs)  # noqa: E501
            return data

    def luma_remove_acl_user_to_onedata_user_mapping_with_http_info(self, id, username, **kwargs):  # noqa: E501
        """Remove mapping of ACL user  # noqa: E501

        Removes mapping of ACL user on the specific storage to Onedata user from LUMA DB. This endpoint is relevant **only for POSIX compatible storages**.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.luma_remove_acl_user_to_onedata_user_mapping_with_http_info(id, username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a storage constituting space support for which onedata user mapping should be removed.  (required)
        :param int username: The ACL name of the user on the storage.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method luma_remove_acl_user_to_onedata_user_mapping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `luma_remove_acl_user_to_onedata_user_mapping`")  # noqa: E501
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `luma_remove_acl_user_to_onedata_user_mapping`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key1', 'api_key2', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/provider/storages/{id}/luma/db/storage_import/posix_compatible/acl_user_to_onedata_user/{username}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def luma_remove_default_posix_credentials(self, id, space_id, **kwargs):  # noqa: E501
        """Remove default posix credentials  # noqa: E501

        Removes default storage credentials for the space supported by POSIX-compatible storage from LUMA DB. Default storage credentials will be acquired again using currently setup LUMA feed. This endpoint is relevant **only for POSIX compatible storages**.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.luma_remove_default_posix_credentials(id, space_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a storage constituting space support for which default storage credentials should be removed.  (required)
        :param str space_id: The Id of a space constituting space support for which default storage credentials should be removed.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.luma_remove_default_posix_credentials_with_http_info(id, space_id, **kwargs)  # noqa: E501
        else:
            (data) = self.luma_remove_default_posix_credentials_with_http_info(id, space_id, **kwargs)  # noqa: E501
            return data

    def luma_remove_default_posix_credentials_with_http_info(self, id, space_id, **kwargs):  # noqa: E501
        """Remove default posix credentials  # noqa: E501

        Removes default storage credentials for the space supported by POSIX-compatible storage from LUMA DB. Default storage credentials will be acquired again using currently setup LUMA feed. This endpoint is relevant **only for POSIX compatible storages**.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.luma_remove_default_posix_credentials_with_http_info(id, space_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a storage constituting space support for which default storage credentials should be removed.  (required)
        :param str space_id: The Id of a space constituting space support for which default storage credentials should be removed.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'space_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method luma_remove_default_posix_credentials" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `luma_remove_default_posix_credentials`")  # noqa: E501
        # verify the required parameter 'space_id' is set
        if ('space_id' not in params or
                params['space_id'] is None):
            raise ValueError("Missing the required parameter `space_id` when calling `luma_remove_default_posix_credentials`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'space_id' in params:
            path_params['space_id'] = params['space_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key1', 'api_key2', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/provider/storages/{id}/luma/db/storage_access/posix_compatible/default_credentials/{space_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def luma_remove_display_credentials(self, id, space_id, **kwargs):  # noqa: E501
        """Remove default display credentials  # noqa: E501

        Removes default display credentials for the space support from LUMA DB. Default display credentials will be acquired again using currently setup LUMA feed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.luma_remove_display_credentials(id, space_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a storage constituting space support for which default display credentials should be removed.  (required)
        :param str space_id: The Id of a space constituting space support for which default display credentials should be removed.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.luma_remove_display_credentials_with_http_info(id, space_id, **kwargs)  # noqa: E501
        else:
            (data) = self.luma_remove_display_credentials_with_http_info(id, space_id, **kwargs)  # noqa: E501
            return data

    def luma_remove_display_credentials_with_http_info(self, id, space_id, **kwargs):  # noqa: E501
        """Remove default display credentials  # noqa: E501

        Removes default display credentials for the space support from LUMA DB. Default display credentials will be acquired again using currently setup LUMA feed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.luma_remove_display_credentials_with_http_info(id, space_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a storage constituting space support for which default display credentials should be removed.  (required)
        :param str space_id: The Id of a space constituting space support for which default display credentials should be removed.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'space_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method luma_remove_display_credentials" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `luma_remove_display_credentials`")  # noqa: E501
        # verify the required parameter 'space_id' is set
        if ('space_id' not in params or
                params['space_id'] is None):
            raise ValueError("Missing the required parameter `space_id` when calling `luma_remove_display_credentials`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'space_id' in params:
            path_params['space_id'] = params['space_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key1', 'api_key2', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/provider/storages/{id}/luma/db/display_credentials/all/default/{space_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def luma_remove_onedata_user_to_credentials_mapping(self, id, onedata_user_id, **kwargs):  # noqa: E501
        """Remove Onedata user to credentials mapping  # noqa: E501

        Removes mapping of the Onedata user to user on the specific storage from LUMA DB. Mapping will be acquired again using currently setup LUMA feed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.luma_remove_onedata_user_to_credentials_mapping(id, onedata_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a storage for which user mapping should be removed.  (required)
        :param str onedata_user_id: The Id of a user for which mapping should be removed.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.luma_remove_onedata_user_to_credentials_mapping_with_http_info(id, onedata_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.luma_remove_onedata_user_to_credentials_mapping_with_http_info(id, onedata_user_id, **kwargs)  # noqa: E501
            return data

    def luma_remove_onedata_user_to_credentials_mapping_with_http_info(self, id, onedata_user_id, **kwargs):  # noqa: E501
        """Remove Onedata user to credentials mapping  # noqa: E501

        Removes mapping of the Onedata user to user on the specific storage from LUMA DB. Mapping will be acquired again using currently setup LUMA feed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.luma_remove_onedata_user_to_credentials_mapping_with_http_info(id, onedata_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a storage for which user mapping should be removed.  (required)
        :param str onedata_user_id: The Id of a user for which mapping should be removed.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'onedata_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method luma_remove_onedata_user_to_credentials_mapping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `luma_remove_onedata_user_to_credentials_mapping`")  # noqa: E501
        # verify the required parameter 'onedata_user_id' is set
        if ('onedata_user_id' not in params or
                params['onedata_user_id'] is None):
            raise ValueError("Missing the required parameter `onedata_user_id` when calling `luma_remove_onedata_user_to_credentials_mapping`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'onedata_user_id' in params:
            path_params['onedata_user_id'] = params['onedata_user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key1', 'api_key2', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/provider/storages/{id}/luma/db/storage_access/all/onedata_user_to_credentials/{onedata_user_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def luma_remove_uid_to_onedata_user_mapping(self, id, uid, **kwargs):  # noqa: E501
        """Remove mapping of UID  # noqa: E501

        Removes mapping of UID on the specific storage to Onedata user from LUMA DB. This endpoint is relevant **only for POSIX compatible storages**.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.luma_remove_uid_to_onedata_user_mapping(id, uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a storage constituting space support for which onedata user mapping should be removed.  (required)
        :param int uid: The UID of the user on the storage.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.luma_remove_uid_to_onedata_user_mapping_with_http_info(id, uid, **kwargs)  # noqa: E501
        else:
            (data) = self.luma_remove_uid_to_onedata_user_mapping_with_http_info(id, uid, **kwargs)  # noqa: E501
            return data

    def luma_remove_uid_to_onedata_user_mapping_with_http_info(self, id, uid, **kwargs):  # noqa: E501
        """Remove mapping of UID  # noqa: E501

        Removes mapping of UID on the specific storage to Onedata user from LUMA DB. This endpoint is relevant **only for POSIX compatible storages**.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.luma_remove_uid_to_onedata_user_mapping_with_http_info(id, uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of a storage constituting space support for which onedata user mapping should be removed.  (required)
        :param int uid: The UID of the user on the storage.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method luma_remove_uid_to_onedata_user_mapping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `luma_remove_uid_to_onedata_user_mapping`")  # noqa: E501
        # verify the required parameter 'uid' is set
        if ('uid' not in params or
                params['uid'] is None):
            raise ValueError("Missing the required parameter `uid` when calling `luma_remove_uid_to_onedata_user_mapping`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key1', 'api_key2', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/provider/storages/{id}/luma/db/storage_import/posix_compatible/uid_to_onedata_user/{uid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
