# coding: utf-8

"""
    Onepanel

    # Overview  This is the RESTful API definition of **Onepanel** component of Onedata data management system [onedata.org](http://onedata.org).  > This API is defined using [Swagger](http://swagger.io/), the JSON specification can be used to automatically generate client libraries -   [swagger.json](../../../swagger/onepanel/swagger.json).  This API allows control and configuration of local Onedata deployment, in particular full control over the **Onezone** and **Oneprovider** services and their distribution and monitoring on the local resources.  The API is grouped into 3 categories of operations:   * **Onepanel** - for common operations   * **Oneprovider** - for Oneprovider specific administrative operations   * **Onezone** - for Onezone specific administrative operations  Each of these components is composed of the following services:   * **Worker services** - these are available under `/zone/workers` and     `/provider/workers` paths,   * **Databases services** - each Onedata component stores it's metadata in a     Couchbase backend, which can be distributed on any number of nodes, these     are available under `/zone/databases` and `/provider/databases` paths,   * **Cluster manager services** - this is a service which controls other     deployed processes in one site, these are availables under these are     available under `/zone/managers` and `/provider/managers` paths.  **Onezone** and **Oneprovider** components are composed of 3 types of services: **managers**, **databases** and **workers**.  Using this API each of these components can be deployed, configured, started and stopped on a specified host in the local site, in the context of either **Onezone** or **Oneprovider** service.  All paths listed in this documentation are relative to the base Onepanel REST API which is `/api/v3/onepanel`, so complete URL for a request to Onepanel service is:  ``` http://HOSTNAME:PORT/api/v3/onepanel/... ```  ## Authentication  ### Token authentication  The recommended, safest way of authenticating requests to Onepanel API is using the **Onedata access tokens**. The token should be present in `X-Auth-Token` or `Authorization: Bearer` header. See [Onezone documentation](/#/home/api/latest/onezone?anchor=section/Overview/Authentication-and-authorization) for detailed explanation of the token concepts.  Curl examples: ```bash curl -H \"X-Auth-Token: $TOKEN\" [...] curl -H \"Authorization: Bearer $TOKEN\" [...] curl -H \"Macaroon: $TOKEN\" [...]   # DEPRECATED ```   ### Passphrase authentication  The token authentication dependes on the Onezone service. In special cases - during Onezone deployment or its outage - it is necessary to use the local **emergency passphrase**.  The passphrase should be provided in a Basic authentication header with username `onepanel`. For curl users this means ```bash curl -u onepanel:TheEmergencyPassphrase ```  The passphrase can also be sent without any username, as the whole content of base64-encoded string in Basic authorization header, e.g. ```bash curl -H \"Authorization: Basic $(echo -n TheEmergencyPassphrase | base64)\" ```  The passphrase is set during deployment. It can be changed in the Onepanel GUI or with an API request: ```bash curl -X PUT 'https://$PANEL_HOST:9443/api/v3/onepanel/emergency_passphrase' \\ -u onepanel:TheEmergencyPassphrase -H 'Content-Type: application/json' \\ -d '{\"currentPassphrase\": \"TheEmergencyPassphrase\", \"newPassphrase\": \"TheNewPassphrase\"}' ```  ## API structure  The Onepanel API is structured to reflect that it can either be used to control **Onezone** or **Oneprovider** deployment, each Onedata component deployment has a separate Onepanel instance. In order to make the API calls explicit, **Onezone** or **Oneprovider** specific requests have different paths, i.e.:   * Onezone specific operations start with `/api/v3/onepanel/zone/`   * Oneprovider specific operations start with `/api/v3/onepanel/provider/`   * Common operations paths include `/api/v3/onepanel/users`,     `/api/v3/onepanel/hosts` and `/api/v3/onepanel/tasks`  The overall configuration of each component can be controlled by updating `/api/v3/onepanel/zone/configuration` and `/api/v3/onepanel/provider/configuration` resources.  ## Examples  Below are some example requests to Onepanel using cURL:  **Add storage resource to provider** ```bash curl -X POST -u onepanel:Passphrase1 -k -vvv -H \"content-type: application/json\" \\ -d '{\"NFS\": {\"type\": \"posix\", \"mountPoint\": \"/mnt/vfs\"}}' \\ https://172.17.0.4:9443/api/v3/onepanel/provider/storages ```  **Add a new Onezone worker** ```bash curl -X POST -u onepanel:Passphrase1 -k -vvv -H \"content-type: application/json\" \\ -d '{\"hosts\": [\"node1.p1.1.dev\"]}' \\ https://172.17.0.4:9443/api/v3/onepanel/zone/workers ```   # noqa: E501

    OpenAPI spec version: 21.02.3
    Contact: info@onedata.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProviderDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'subdomain_delegation': 'bool',
        'subdomain': 'str',
        'domain': 'str',
        'admin_email': 'str',
        'geo_longitude': 'float',
        'geo_latitude': 'float',
        'onezone_domain_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'subdomain_delegation': 'subdomainDelegation',
        'subdomain': 'subdomain',
        'domain': 'domain',
        'admin_email': 'adminEmail',
        'geo_longitude': 'geoLongitude',
        'geo_latitude': 'geoLatitude',
        'onezone_domain_name': 'onezoneDomainName'
    }

    def __init__(self, id=None, name=None, subdomain_delegation=None, subdomain=None, domain=None, admin_email=None, geo_longitude=None, geo_latitude=None, onezone_domain_name=None):  # noqa: E501
        """ProviderDetails - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._subdomain_delegation = None
        self._subdomain = None
        self._domain = None
        self._admin_email = None
        self._geo_longitude = None
        self._geo_latitude = None
        self._onezone_domain_name = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.subdomain_delegation = subdomain_delegation
        if subdomain is not None:
            self.subdomain = subdomain
        self.domain = domain
        if admin_email is not None:
            self.admin_email = admin_email
        self.geo_longitude = geo_longitude
        self.geo_latitude = geo_latitude
        self.onezone_domain_name = onezone_domain_name

    @property
    def id(self):
        """Gets the id of this ProviderDetails.  # noqa: E501

        The Id assigned by a zone.  # noqa: E501

        :return: The id of this ProviderDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProviderDetails.

        The Id assigned by a zone.  # noqa: E501

        :param id: The id of this ProviderDetails.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProviderDetails.  # noqa: E501

        The name under which the Oneprovider has been registered in a zone.  # noqa: E501

        :return: The name of this ProviderDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProviderDetails.

        The name under which the Oneprovider has been registered in a zone.  # noqa: E501

        :param name: The name of this ProviderDetails.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def subdomain_delegation(self):
        """Gets the subdomain_delegation of this ProviderDetails.  # noqa: E501

        If enabled, the storage Oneprovider has a subdomain in onezone's domain and 'subdomain' property must be provided.   # noqa: E501

        :return: The subdomain_delegation of this ProviderDetails.  # noqa: E501
        :rtype: bool
        """
        return self._subdomain_delegation

    @subdomain_delegation.setter
    def subdomain_delegation(self, subdomain_delegation):
        """Sets the subdomain_delegation of this ProviderDetails.

        If enabled, the storage Oneprovider has a subdomain in onezone's domain and 'subdomain' property must be provided.   # noqa: E501

        :param subdomain_delegation: The subdomain_delegation of this ProviderDetails.  # noqa: E501
        :type: bool
        """
        if subdomain_delegation is None:
            raise ValueError("Invalid value for `subdomain_delegation`, must not be `None`")  # noqa: E501

        self._subdomain_delegation = subdomain_delegation

    @property
    def subdomain(self):
        """Gets the subdomain of this ProviderDetails.  # noqa: E501

        Unique subdomain in onezone's domain for the Oneprovider. Required if subdomain delegation is enabled.   # noqa: E501

        :return: The subdomain of this ProviderDetails.  # noqa: E501
        :rtype: str
        """
        return self._subdomain

    @subdomain.setter
    def subdomain(self, subdomain):
        """Sets the subdomain of this ProviderDetails.

        Unique subdomain in onezone's domain for the Oneprovider. Required if subdomain delegation is enabled.   # noqa: E501

        :param subdomain: The subdomain of this ProviderDetails.  # noqa: E501
        :type: str
        """

        self._subdomain = subdomain

    @property
    def domain(self):
        """Gets the domain of this ProviderDetails.  # noqa: E501

        The fully qualified domain name of the Oneprovider or its IP address (only for single-node deployments or clusters with a reverse proxy).   # noqa: E501

        :return: The domain of this ProviderDetails.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ProviderDetails.

        The fully qualified domain name of the Oneprovider or its IP address (only for single-node deployments or clusters with a reverse proxy).   # noqa: E501

        :param domain: The domain of this ProviderDetails.  # noqa: E501
        :type: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain

    @property
    def admin_email(self):
        """Gets the admin_email of this ProviderDetails.  # noqa: E501

        Email address of the Oneprovider administrator. Omitted if it could not be retrievied.  # noqa: E501

        :return: The admin_email of this ProviderDetails.  # noqa: E501
        :rtype: str
        """
        return self._admin_email

    @admin_email.setter
    def admin_email(self, admin_email):
        """Sets the admin_email of this ProviderDetails.

        Email address of the Oneprovider administrator. Omitted if it could not be retrievied.  # noqa: E501

        :param admin_email: The admin_email of this ProviderDetails.  # noqa: E501
        :type: str
        """

        self._admin_email = admin_email

    @property
    def geo_longitude(self):
        """Gets the geo_longitude of this ProviderDetails.  # noqa: E501

        The geographical longitude of the Oneprovider.  # noqa: E501

        :return: The geo_longitude of this ProviderDetails.  # noqa: E501
        :rtype: float
        """
        return self._geo_longitude

    @geo_longitude.setter
    def geo_longitude(self, geo_longitude):
        """Sets the geo_longitude of this ProviderDetails.

        The geographical longitude of the Oneprovider.  # noqa: E501

        :param geo_longitude: The geo_longitude of this ProviderDetails.  # noqa: E501
        :type: float
        """
        if geo_longitude is None:
            raise ValueError("Invalid value for `geo_longitude`, must not be `None`")  # noqa: E501

        self._geo_longitude = geo_longitude

    @property
    def geo_latitude(self):
        """Gets the geo_latitude of this ProviderDetails.  # noqa: E501

        The geographical latitude of the Oneprovider.  # noqa: E501

        :return: The geo_latitude of this ProviderDetails.  # noqa: E501
        :rtype: float
        """
        return self._geo_latitude

    @geo_latitude.setter
    def geo_latitude(self, geo_latitude):
        """Sets the geo_latitude of this ProviderDetails.

        The geographical latitude of the Oneprovider.  # noqa: E501

        :param geo_latitude: The geo_latitude of this ProviderDetails.  # noqa: E501
        :type: float
        """
        if geo_latitude is None:
            raise ValueError("Invalid value for `geo_latitude`, must not be `None`")  # noqa: E501

        self._geo_latitude = geo_latitude

    @property
    def onezone_domain_name(self):
        """Gets the onezone_domain_name of this ProviderDetails.  # noqa: E501

        The domain name of a zone where this storage Oneprovider is registered.  # noqa: E501

        :return: The onezone_domain_name of this ProviderDetails.  # noqa: E501
        :rtype: str
        """
        return self._onezone_domain_name

    @onezone_domain_name.setter
    def onezone_domain_name(self, onezone_domain_name):
        """Sets the onezone_domain_name of this ProviderDetails.

        The domain name of a zone where this storage Oneprovider is registered.  # noqa: E501

        :param onezone_domain_name: The onezone_domain_name of this ProviderDetails.  # noqa: E501
        :type: str
        """
        if onezone_domain_name is None:
            raise ValueError("Invalid value for `onezone_domain_name`, must not be `None`")  # noqa: E501

        self._onezone_domain_name = onezone_domain_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProviderDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProviderDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
