# coding: utf-8

"""
    Onepanel

    # Overview  This is the RESTful API definition of **Onepanel** component of Onedata data management system [onedata.org](http://onedata.org).  > This API is defined using [Swagger](http://swagger.io/), the JSON specification can be used to automatically generate client libraries -   [swagger.json](../../../swagger/onepanel/swagger.json).  This API allows control and configuration of local Onedata deployment, in particular full control over the **Onezone** and **Oneprovider** services and their distribution and monitoring on the local resources.  The API is grouped into 3 categories of operations:   * **Onepanel** - for common operations   * **Oneprovider** - for Oneprovider specific administrative operations   * **Onezone** - for Onezone specific administrative operations  Each of these components is composed of the following services:   * **Worker services** - these are available under `/zone/workers` and     `/provider/workers` paths,   * **Databases services** - each Onedata component stores it's metadata in a     Couchbase backend, which can be distributed on any number of nodes, these     are available under `/zone/databases` and `/provider/databases` paths,   * **Cluster manager services** - this is a service which controls other     deployed processes in one site, these are availables under these are     available under `/zone/managers` and `/provider/managers` paths.  **Onezone** and **Oneprovider** components are composed of 3 types of services: **managers**, **databases** and **workers**.  Using this API each of these components can be deployed, configured, started and stopped on a specified host in the local site, in the context of either **Onezone** or **Oneprovider** service.  All paths listed in this documentation are relative to the base Onepanel REST API which is `/api/v3/onepanel`, so complete URL for a request to Onepanel service is:  ``` http://HOSTNAME:PORT/api/v3/onepanel/... ```  ## Authentication  ### Token authentication  The recommended, safest way of authenticating requests to Onepanel API is using the **Onedata access tokens**. The token should be present in `X-Auth-Token` or `Authorization: Bearer` header. See [Onezone documentation](/#/home/api/latest/onezone?anchor=section/Overview/Authentication-and-authorization) for detailed explanation of the token concepts.  Curl examples: ```bash curl -H \"X-Auth-Token: $TOKEN\" [...] curl -H \"Authorization: Bearer $TOKEN\" [...] curl -H \"Macaroon: $TOKEN\" [...]   # DEPRECATED ```   ### Passphrase authentication  The token authentication dependes on the Onezone service. In special cases - during Onezone deployment or its outage - it is necessary to use the local **emergency passphrase**.  The passphrase should be provided in a Basic authentication header with username `onepanel`. For curl users this means ```bash curl -u onepanel:TheEmergencyPassphrase ```  The passphrase can also be sent without any username, as the whole content of base64-encoded string in Basic authorization header, e.g. ```bash curl -H \"Authorization: Basic $(echo -n TheEmergencyPassphrase | base64)\" ```  The passphrase is set during deployment. It can be changed in the Onepanel GUI or with an API request: ```bash curl -X PUT 'https://$PANEL_HOST:9443/api/v3/onepanel/emergency_passphrase' \\ -u onepanel:TheEmergencyPassphrase -H 'Content-Type: application/json' \\ -d '{\"currentPassphrase\": \"TheEmergencyPassphrase\", \"newPassphrase\": \"TheNewPassphrase\"}' ```  ## API structure  The Onepanel API is structured to reflect that it can either be used to control **Onezone** or **Oneprovider** deployment, each Onedata component deployment has a separate Onepanel instance. In order to make the API calls explicit, **Onezone** or **Oneprovider** specific requests have different paths, i.e.:   * Onezone specific operations start with `/api/v3/onepanel/zone/`   * Oneprovider specific operations start with `/api/v3/onepanel/provider/`   * Common operations paths include `/api/v3/onepanel/users`,     `/api/v3/onepanel/hosts` and `/api/v3/onepanel/tasks`  The overall configuration of each component can be controlled by updating `/api/v3/onepanel/zone/configuration` and `/api/v3/onepanel/provider/configuration` resources.  ## Examples  Below are some example requests to Onepanel using cURL:  **Add storage resource to provider** ```bash curl -X POST -u onepanel:Passphrase1 -k -vvv -H \"content-type: application/json\" \\ -d '{\"NFS\": {\"type\": \"posix\", \"mountPoint\": \"/mnt/vfs\"}}' \\ https://172.17.0.4:9443/api/v3/onepanel/provider/storages ```  **Add a new Onezone worker** ```bash curl -X POST -u onepanel:Passphrase1 -k -vvv -H \"content-type: application/json\" \\ -d '{\"hosts\": [\"node1.p1.1.dev\"]}' \\ https://172.17.0.4:9443/api/v3/onepanel/zone/workers ```   # noqa: E501

    OpenAPI spec version: 21.02.3
    Contact: info@onedata.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from onepanel_client.models.storage_modify_details import StorageModifyDetails  # noqa: F401,E501

class NulldeviceModify(StorageModifyDetails):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'latency_min': 'int',
        'latency_max': 'int',
        'timeout_probability': 'float',
        'filter': 'str',
        'simulated_filesystem_parameters': 'str',
        'simulated_filesystem_grow_speed': 'float',
        'enable_data_verification': 'bool'
    }
    if hasattr(StorageModifyDetails, "swagger_types"):
        swagger_types.update(StorageModifyDetails.swagger_types)

    attribute_map = {
        'type': 'type',
        'latency_min': 'latencyMin',
        'latency_max': 'latencyMax',
        'timeout_probability': 'timeoutProbability',
        'filter': 'filter',
        'simulated_filesystem_parameters': 'simulatedFilesystemParameters',
        'simulated_filesystem_grow_speed': 'simulatedFilesystemGrowSpeed',
        'enable_data_verification': 'enableDataVerification'
    }
    if hasattr(StorageModifyDetails, "attribute_map"):
        attribute_map.update(StorageModifyDetails.attribute_map)

    def __init__(self, type=None, latency_min=None, latency_max=None, timeout_probability=None, filter=None, simulated_filesystem_parameters=None, simulated_filesystem_grow_speed=None, enable_data_verification=False, *args, **kwargs):  # noqa: E501
        """NulldeviceModify - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._latency_min = None
        self._latency_max = None
        self._timeout_probability = None
        self._filter = None
        self._simulated_filesystem_parameters = None
        self._simulated_filesystem_grow_speed = None
        self._enable_data_verification = None
        self.discriminator = None
        self.type = type
        if latency_min is not None:
            self.latency_min = latency_min
        if latency_max is not None:
            self.latency_max = latency_max
        if timeout_probability is not None:
            self.timeout_probability = timeout_probability
        if filter is not None:
            self.filter = filter
        if simulated_filesystem_parameters is not None:
            self.simulated_filesystem_parameters = simulated_filesystem_parameters
        if simulated_filesystem_grow_speed is not None:
            self.simulated_filesystem_grow_speed = simulated_filesystem_grow_speed
        if enable_data_verification is not None:
            self.enable_data_verification = enable_data_verification
        StorageModifyDetails.__init__(self, *args, **kwargs)

    @property
    def type(self):
        """Gets the type of this NulldeviceModify.  # noqa: E501

        The type of storage.  `type = \"nulldevice\"`  POSIX compatible storage which emulates behavior of `/dev/null` on local filesystem. Allows running various performance tests, which are not impacted by actual storage latency. Skip storage detection option is obligatory for this type of storage.   # noqa: E501

        :return: The type of this NulldeviceModify.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NulldeviceModify.

        The type of storage.  `type = \"nulldevice\"`  POSIX compatible storage which emulates behavior of `/dev/null` on local filesystem. Allows running various performance tests, which are not impacted by actual storage latency. Skip storage detection option is obligatory for this type of storage.   # noqa: E501

        :param type: The type of this NulldeviceModify.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["nulldevice"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def latency_min(self):
        """Gets the latency_min of this NulldeviceModify.  # noqa: E501

        Minimum latency in milliseconds, which should be simulated for selected operations.   # noqa: E501

        :return: The latency_min of this NulldeviceModify.  # noqa: E501
        :rtype: int
        """
        return self._latency_min

    @latency_min.setter
    def latency_min(self, latency_min):
        """Sets the latency_min of this NulldeviceModify.

        Minimum latency in milliseconds, which should be simulated for selected operations.   # noqa: E501

        :param latency_min: The latency_min of this NulldeviceModify.  # noqa: E501
        :type: int
        """

        self._latency_min = latency_min

    @property
    def latency_max(self):
        """Gets the latency_max of this NulldeviceModify.  # noqa: E501

        Maximum latency in milliseconds, which should be simulated for selected operations.   # noqa: E501

        :return: The latency_max of this NulldeviceModify.  # noqa: E501
        :rtype: int
        """
        return self._latency_max

    @latency_max.setter
    def latency_max(self, latency_max):
        """Sets the latency_max of this NulldeviceModify.

        Maximum latency in milliseconds, which should be simulated for selected operations.   # noqa: E501

        :param latency_max: The latency_max of this NulldeviceModify.  # noqa: E501
        :type: int
        """

        self._latency_max = latency_max

    @property
    def timeout_probability(self):
        """Gets the timeout_probability of this NulldeviceModify.  # noqa: E501

        Probability (0.0, 1.0), with which an operation should return a timeout error.   # noqa: E501

        :return: The timeout_probability of this NulldeviceModify.  # noqa: E501
        :rtype: float
        """
        return self._timeout_probability

    @timeout_probability.setter
    def timeout_probability(self, timeout_probability):
        """Sets the timeout_probability of this NulldeviceModify.

        Probability (0.0, 1.0), with which an operation should return a timeout error.   # noqa: E501

        :param timeout_probability: The timeout_probability of this NulldeviceModify.  # noqa: E501
        :type: float
        """

        self._timeout_probability = timeout_probability

    @property
    def filter(self):
        """Gets the filter of this NulldeviceModify.  # noqa: E501

        Comma-separated list of filesystem operations, for which latency and timeout should be simulated. Empty or '*' mean all operations will be affected.   # noqa: E501

        :return: The filter of this NulldeviceModify.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this NulldeviceModify.

        Comma-separated list of filesystem operations, for which latency and timeout should be simulated. Empty or '*' mean all operations will be affected.   # noqa: E501

        :param filter: The filter of this NulldeviceModify.  # noqa: E501
        :type: str
        """

        self._filter = filter

    @property
    def simulated_filesystem_parameters(self):
        """Gets the simulated_filesystem_parameters of this NulldeviceModify.  # noqa: E501

        Specifies the parameters for a simulated null device filesystem. For example `2-2:2-2:0-1` will generate a filesystem tree which has 2 directories (`0` and `1`) and 2 files (`2` and `3`) in the root of the filesystem, each of these directories will have 2 subdirectories (`0` and `1`) and 2 files (`2` and `3`) and each of these subdirectories has only a single file (`0`). In order to specify the size of generated files, a size in bytes needs to be added as the last component of the parameter specification, for example `2-2:2-2:0-1:1048576`. Default empty string disables the simulated filesystem feature.   # noqa: E501

        :return: The simulated_filesystem_parameters of this NulldeviceModify.  # noqa: E501
        :rtype: str
        """
        return self._simulated_filesystem_parameters

    @simulated_filesystem_parameters.setter
    def simulated_filesystem_parameters(self, simulated_filesystem_parameters):
        """Sets the simulated_filesystem_parameters of this NulldeviceModify.

        Specifies the parameters for a simulated null device filesystem. For example `2-2:2-2:0-1` will generate a filesystem tree which has 2 directories (`0` and `1`) and 2 files (`2` and `3`) in the root of the filesystem, each of these directories will have 2 subdirectories (`0` and `1`) and 2 files (`2` and `3`) and each of these subdirectories has only a single file (`0`). In order to specify the size of generated files, a size in bytes needs to be added as the last component of the parameter specification, for example `2-2:2-2:0-1:1048576`. Default empty string disables the simulated filesystem feature.   # noqa: E501

        :param simulated_filesystem_parameters: The simulated_filesystem_parameters of this NulldeviceModify.  # noqa: E501
        :type: str
        """

        self._simulated_filesystem_parameters = simulated_filesystem_parameters

    @property
    def simulated_filesystem_grow_speed(self):
        """Gets the simulated_filesystem_grow_speed of this NulldeviceModify.  # noqa: E501

        Determines the simulated filesystem grow rate. Default 0.0 value will cause all the files and directories defined by the `simulatedFilesystemParameters` specification to be visible immediately. For example value of 0.01 will increase the number of the visible filesystem entries by 1 file per 100 seconds, while 100.0 will increase it by 100 files per second.   # noqa: E501

        :return: The simulated_filesystem_grow_speed of this NulldeviceModify.  # noqa: E501
        :rtype: float
        """
        return self._simulated_filesystem_grow_speed

    @simulated_filesystem_grow_speed.setter
    def simulated_filesystem_grow_speed(self, simulated_filesystem_grow_speed):
        """Sets the simulated_filesystem_grow_speed of this NulldeviceModify.

        Determines the simulated filesystem grow rate. Default 0.0 value will cause all the files and directories defined by the `simulatedFilesystemParameters` specification to be visible immediately. For example value of 0.01 will increase the number of the visible filesystem entries by 1 file per 100 seconds, while 100.0 will increase it by 100 files per second.   # noqa: E501

        :param simulated_filesystem_grow_speed: The simulated_filesystem_grow_speed of this NulldeviceModify.  # noqa: E501
        :type: float
        """

        self._simulated_filesystem_grow_speed = simulated_filesystem_grow_speed

    @property
    def enable_data_verification(self):
        """Gets the enable_data_verification of this NulldeviceModify.  # noqa: E501

        Enables data verification for `read` and `write` operations. Read operations will always return a predictable pattern of characters based on `offset` and `size`, and `write` operations will fail with I/O error, if the input data does not match the pattern at a given `offset`.   # noqa: E501

        :return: The enable_data_verification of this NulldeviceModify.  # noqa: E501
        :rtype: bool
        """
        return self._enable_data_verification

    @enable_data_verification.setter
    def enable_data_verification(self, enable_data_verification):
        """Sets the enable_data_verification of this NulldeviceModify.

        Enables data verification for `read` and `write` operations. Read operations will always return a predictable pattern of characters based on `offset` and `size`, and `write` operations will fail with I/O error, if the input data does not match the pattern at a given `offset`.   # noqa: E501

        :param enable_data_verification: The enable_data_verification of this NulldeviceModify.  # noqa: E501
        :type: bool
        """

        self._enable_data_verification = enable_data_verification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NulldeviceModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NulldeviceModify):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
