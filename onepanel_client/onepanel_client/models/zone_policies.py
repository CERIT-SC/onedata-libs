# coding: utf-8

"""
    Onepanel

    # Overview  This is the RESTful API definition of **Onepanel** component of Onedata data management system [onedata.org](http://onedata.org).  > This API is defined using [Swagger](http://swagger.io/), the JSON specification can be used to automatically generate client libraries -   [swagger.json](../../../swagger/onepanel/swagger.json).  This API allows control and configuration of local Onedata deployment, in particular full control over the **Onezone** and **Oneprovider** services and their distribution and monitoring on the local resources.  The API is grouped into 3 categories of operations:   * **Onepanel** - for common operations   * **Oneprovider** - for Oneprovider specific administrative operations   * **Onezone** - for Onezone specific administrative operations  Each of these components is composed of the following services:   * **Worker services** - these are available under `/zone/workers` and     `/provider/workers` paths,   * **Databases services** - each Onedata component stores it's metadata in a     Couchbase backend, which can be distributed on any number of nodes, these     are available under `/zone/databases` and `/provider/databases` paths,   * **Cluster manager services** - this is a service which controls other     deployed processes in one site, these are availables under these are     available under `/zone/managers` and `/provider/managers` paths.  **Onezone** and **Oneprovider** components are composed of 3 types of services: **managers**, **databases** and **workers**.  Using this API each of these components can be deployed, configured, started and stopped on a specified host in the local site, in the context of either **Onezone** or **Oneprovider** service.  All paths listed in this documentation are relative to the base Onepanel REST API which is `/api/v3/onepanel`, so complete URL for a request to Onepanel service is:  ``` http://HOSTNAME:PORT/api/v3/onepanel/... ```  ## Authentication  ### Token authentication  The recommended, safest way of authenticating requests to Onepanel API is using the **Onedata access tokens**. The token should be present in `X-Auth-Token` or `Authorization: Bearer` header. See [Onezone documentation](/#/home/api/latest/onezone?anchor=section/Overview/Authentication-and-authorization) for detailed explanation of the token concepts.  Curl examples: ```bash curl -H \"X-Auth-Token: $TOKEN\" [...] curl -H \"Authorization: Bearer $TOKEN\" [...] curl -H \"Macaroon: $TOKEN\" [...]   # DEPRECATED ```   ### Passphrase authentication  The token authentication dependes on the Onezone service. In special cases - during Onezone deployment or its outage - it is necessary to use the local **emergency passphrase**.  The passphrase should be provided in a Basic authentication header with username `onepanel`. For curl users this means ```bash curl -u onepanel:TheEmergencyPassphrase ```  The passphrase can also be sent without any username, as the whole content of base64-encoded string in Basic authorization header, e.g. ```bash curl -H \"Authorization: Basic $(echo -n TheEmergencyPassphrase | base64)\" ```  The passphrase is set during deployment. It can be changed in the Onepanel GUI or with an API request: ```bash curl -X PUT 'https://$PANEL_HOST:9443/api/v3/onepanel/emergency_passphrase' \\ -u onepanel:TheEmergencyPassphrase -H 'Content-Type: application/json' \\ -d '{\"currentPassphrase\": \"TheEmergencyPassphrase\", \"newPassphrase\": \"TheNewPassphrase\"}' ```  ## API structure  The Onepanel API is structured to reflect that it can either be used to control **Onezone** or **Oneprovider** deployment, each Onedata component deployment has a separate Onepanel instance. In order to make the API calls explicit, **Onezone** or **Oneprovider** specific requests have different paths, i.e.:   * Onezone specific operations start with `/api/v3/onepanel/zone/`   * Oneprovider specific operations start with `/api/v3/onepanel/provider/`   * Common operations paths include `/api/v3/onepanel/users`,     `/api/v3/onepanel/hosts` and `/api/v3/onepanel/tasks`  The overall configuration of each component can be controlled by updating `/api/v3/onepanel/zone/configuration` and `/api/v3/onepanel/provider/configuration` resources.  ## Examples  Below are some example requests to Onepanel using cURL:  **Add storage resource to provider** ```bash curl -X POST -u onepanel:Passphrase1 -k -vvv -H \"content-type: application/json\" \\ -d '{\"NFS\": {\"type\": \"posix\", \"mountPoint\": \"/mnt/vfs\"}}' \\ https://172.17.0.4:9443/api/v3/onepanel/provider/storages ```  **Add a new Onezone worker** ```bash curl -X POST -u onepanel:Passphrase1 -k -vvv -H \"content-type: application/json\" \\ -d '{\"hosts\": [\"node1.p1.1.dev\"]}' \\ https://172.17.0.4:9443/api/v3/onepanel/zone/workers ```   # noqa: E501

    OpenAPI spec version: 21.02.3
    Contact: info@onedata.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ZonePolicies(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'oneprovider_registration': 'str',
        'subdomain_delegation': 'bool',
        'gui_package_verification': 'bool',
        'harvester_gui_package_verification': 'bool'
    }

    attribute_map = {
        'oneprovider_registration': 'oneproviderRegistration',
        'subdomain_delegation': 'subdomainDelegation',
        'gui_package_verification': 'guiPackageVerification',
        'harvester_gui_package_verification': 'harvesterGuiPackageVerification'
    }

    def __init__(self, oneprovider_registration=None, subdomain_delegation=None, gui_package_verification=True, harvester_gui_package_verification=True):  # noqa: E501
        """ZonePolicies - a model defined in Swagger"""  # noqa: E501
        self._oneprovider_registration = None
        self._subdomain_delegation = None
        self._gui_package_verification = None
        self._harvester_gui_package_verification = None
        self.discriminator = None
        if oneprovider_registration is not None:
            self.oneprovider_registration = oneprovider_registration
        if subdomain_delegation is not None:
            self.subdomain_delegation = subdomain_delegation
        if gui_package_verification is not None:
            self.gui_package_verification = gui_package_verification
        if harvester_gui_package_verification is not None:
            self.harvester_gui_package_verification = harvester_gui_package_verification

    @property
    def oneprovider_registration(self):
        """Gets the oneprovider_registration of this ZonePolicies.  # noqa: E501

        Indicates policy enforced during provider registration. Possible options are: open - anyone can acquire a registration token and register a new Oneprovider restricted - requires an administrative privilege 'oz_providers_invite'              to generate a Oneprovider registration token. The token              can be issued for someone else.   # noqa: E501

        :return: The oneprovider_registration of this ZonePolicies.  # noqa: E501
        :rtype: str
        """
        return self._oneprovider_registration

    @oneprovider_registration.setter
    def oneprovider_registration(self, oneprovider_registration):
        """Sets the oneprovider_registration of this ZonePolicies.

        Indicates policy enforced during provider registration. Possible options are: open - anyone can acquire a registration token and register a new Oneprovider restricted - requires an administrative privilege 'oz_providers_invite'              to generate a Oneprovider registration token. The token              can be issued for someone else.   # noqa: E501

        :param oneprovider_registration: The oneprovider_registration of this ZonePolicies.  # noqa: E501
        :type: str
        """
        allowed_values = ["open", "restricted"]  # noqa: E501
        if oneprovider_registration not in allowed_values:
            raise ValueError(
                "Invalid value for `oneprovider_registration` ({0}), must be one of {1}"  # noqa: E501
                .format(oneprovider_registration, allowed_values)
            )

        self._oneprovider_registration = oneprovider_registration

    @property
    def subdomain_delegation(self):
        """Gets the subdomain_delegation of this ZonePolicies.  # noqa: E501

        If true, Oneproviders are allowed to request subdomains of the Onezone domain for use as their domains.  # noqa: E501

        :return: The subdomain_delegation of this ZonePolicies.  # noqa: E501
        :rtype: bool
        """
        return self._subdomain_delegation

    @subdomain_delegation.setter
    def subdomain_delegation(self, subdomain_delegation):
        """Sets the subdomain_delegation of this ZonePolicies.

        If true, Oneproviders are allowed to request subdomains of the Onezone domain for use as their domains.  # noqa: E501

        :param subdomain_delegation: The subdomain_delegation of this ZonePolicies.  # noqa: E501
        :type: bool
        """

        self._subdomain_delegation = subdomain_delegation

    @property
    def gui_package_verification(self):
        """Gets the gui_package_verification of this ZonePolicies.  # noqa: E501

        When this value is true, GUI packages uploaded by services operating under Onezone or by harvester admins are checked against known SHA-256 checksums using the compatibility registry. Setting this value to false disables the verification. WARNING: disabling GUI package verification poses a severe security threat, allowing Oneprovider owners to upload arbitrary GUI to Onezone (which is then hosted in Onezone's domain).   # noqa: E501

        :return: The gui_package_verification of this ZonePolicies.  # noqa: E501
        :rtype: bool
        """
        return self._gui_package_verification

    @gui_package_verification.setter
    def gui_package_verification(self, gui_package_verification):
        """Sets the gui_package_verification of this ZonePolicies.

        When this value is true, GUI packages uploaded by services operating under Onezone or by harvester admins are checked against known SHA-256 checksums using the compatibility registry. Setting this value to false disables the verification. WARNING: disabling GUI package verification poses a severe security threat, allowing Oneprovider owners to upload arbitrary GUI to Onezone (which is then hosted in Onezone's domain).   # noqa: E501

        :param gui_package_verification: The gui_package_verification of this ZonePolicies.  # noqa: E501
        :type: bool
        """

        self._gui_package_verification = gui_package_verification

    @property
    def harvester_gui_package_verification(self):
        """Gets the harvester_gui_package_verification of this ZonePolicies.  # noqa: E501

        This policy can be used to disable GUI package verification for harvester plugins only. See \"guiPackageVerification\" for detailed description. This setting has no effect if \"guiPackageVerification\" is set to false.   # noqa: E501

        :return: The harvester_gui_package_verification of this ZonePolicies.  # noqa: E501
        :rtype: bool
        """
        return self._harvester_gui_package_verification

    @harvester_gui_package_verification.setter
    def harvester_gui_package_verification(self, harvester_gui_package_verification):
        """Sets the harvester_gui_package_verification of this ZonePolicies.

        This policy can be used to disable GUI package verification for harvester plugins only. See \"guiPackageVerification\" for detailed description. This setting has no effect if \"guiPackageVerification\" is set to false.   # noqa: E501

        :param harvester_gui_package_verification: The harvester_gui_package_verification of this ZonePolicies.  # noqa: E501
        :type: bool
        """

        self._harvester_gui_package_verification = harvester_gui_package_verification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ZonePolicies, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ZonePolicies):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
