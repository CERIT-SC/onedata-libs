# coding: utf-8

"""
    Onepanel

    # Overview  This is the RESTful API definition of **Onepanel** component of Onedata data management system [onedata.org](http://onedata.org).  > This API is defined using [Swagger](http://swagger.io/), the JSON specification can be used to automatically generate client libraries -   [swagger.json](../../../swagger/onepanel/swagger.json).  This API allows control and configuration of local Onedata deployment, in particular full control over the **Onezone** and **Oneprovider** services and their distribution and monitoring on the local resources.  The API is grouped into 3 categories of operations:   * **Onepanel** - for common operations   * **Oneprovider** - for Oneprovider specific administrative operations   * **Onezone** - for Onezone specific administrative operations  Each of these components is composed of the following services:   * **Worker services** - these are available under `/zone/workers` and     `/provider/workers` paths,   * **Databases services** - each Onedata component stores it's metadata in a     Couchbase backend, which can be distributed on any number of nodes, these     are available under `/zone/databases` and `/provider/databases` paths,   * **Cluster manager services** - this is a service which controls other     deployed processes in one site, these are availables under these are     available under `/zone/managers` and `/provider/managers` paths.  **Onezone** and **Oneprovider** components are composed of 3 types of services: **managers**, **databases** and **workers**.  Using this API each of these components can be deployed, configured, started and stopped on a specified host in the local site, in the context of either **Onezone** or **Oneprovider** service.  All paths listed in this documentation are relative to the base Onepanel REST API which is `/api/v3/onepanel`, so complete URL for a request to Onepanel service is:  ``` http://HOSTNAME:PORT/api/v3/onepanel/... ```  ## Authentication  ### Token authentication  The recommended, safest way of authenticating requests to Onepanel API is using the **Onedata access tokens**. The token should be present in `X-Auth-Token` or `Authorization: Bearer` header. See [Onezone documentation](/#/home/api/latest/onezone?anchor=section/Overview/Authentication-and-authorization) for detailed explanation of the token concepts.  Curl examples: ```bash curl -H \"X-Auth-Token: $TOKEN\" [...] curl -H \"Authorization: Bearer $TOKEN\" [...] curl -H \"Macaroon: $TOKEN\" [...]   # DEPRECATED ```   ### Passphrase authentication  The token authentication dependes on the Onezone service. In special cases - during Onezone deployment or its outage - it is necessary to use the local **emergency passphrase**.  The passphrase should be provided in a Basic authentication header with username `onepanel`. For curl users this means ```bash curl -u onepanel:TheEmergencyPassphrase ```  The passphrase can also be sent without any username, as the whole content of base64-encoded string in Basic authorization header, e.g. ```bash curl -H \"Authorization: Basic $(echo -n TheEmergencyPassphrase | base64)\" ```  The passphrase is set during deployment. It can be changed in the Onepanel GUI or with an API request: ```bash curl -X PUT 'https://$PANEL_HOST:9443/api/v3/onepanel/emergency_passphrase' \\ -u onepanel:TheEmergencyPassphrase -H 'Content-Type: application/json' \\ -d '{\"currentPassphrase\": \"TheEmergencyPassphrase\", \"newPassphrase\": \"TheNewPassphrase\"}' ```  ## API structure  The Onepanel API is structured to reflect that it can either be used to control **Onezone** or **Oneprovider** deployment, each Onedata component deployment has a separate Onepanel instance. In order to make the API calls explicit, **Onezone** or **Oneprovider** specific requests have different paths, i.e.:   * Onezone specific operations start with `/api/v3/onepanel/zone/`   * Oneprovider specific operations start with `/api/v3/onepanel/provider/`   * Common operations paths include `/api/v3/onepanel/users`,     `/api/v3/onepanel/hosts` and `/api/v3/onepanel/tasks`  The overall configuration of each component can be controlled by updating `/api/v3/onepanel/zone/configuration` and `/api/v3/onepanel/provider/configuration` resources.  ## Examples  Below are some example requests to Onepanel using cURL:  **Add storage resource to provider** ```bash curl -X POST -u onepanel:Passphrase1 -k -vvv -H \"content-type: application/json\" \\ -d '{\"NFS\": {\"type\": \"posix\", \"mountPoint\": \"/mnt/vfs\"}}' \\ https://172.17.0.4:9443/api/v3/onepanel/provider/storages ```  **Add a new Onezone worker** ```bash curl -X POST -u onepanel:Passphrase1 -k -vvv -H \"content-type: application/json\" \\ -d '{\"hosts\": [\"node1.p1.1.dev\"]}' \\ https://172.17.0.4:9443/api/v3/onepanel/zone/workers ```   # noqa: E501

    OpenAPI spec version: 21.02.3
    Contact: info@onedata.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SpaceFilePopularityConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'example_query': 'str',
        'last_open_hour_weight': 'float',
        'avg_open_count_per_day_weight': 'float',
        'max_avg_open_count_per_day': 'float'
    }

    attribute_map = {
        'enabled': 'enabled',
        'example_query': 'exampleQuery',
        'last_open_hour_weight': 'lastOpenHourWeight',
        'avg_open_count_per_day_weight': 'avgOpenCountPerDayWeight',
        'max_avg_open_count_per_day': 'maxAvgOpenCountPerDay'
    }

    def __init__(self, enabled=None, example_query=None, last_open_hour_weight=1.0, avg_open_count_per_day_weight=20.0, max_avg_open_count_per_day=100.0):  # noqa: E501
        """SpaceFilePopularityConfiguration - a model defined in Swagger"""  # noqa: E501
        self._enabled = None
        self._example_query = None
        self._last_open_hour_weight = None
        self._avg_open_count_per_day_weight = None
        self._max_avg_open_count_per_day = None
        self.discriminator = None
        if enabled is not None:
            self.enabled = enabled
        if example_query is not None:
            self.example_query = example_query
        if last_open_hour_weight is not None:
            self.last_open_hour_weight = last_open_hour_weight
        if avg_open_count_per_day_weight is not None:
            self.avg_open_count_per_day_weight = avg_open_count_per_day_weight
        if max_avg_open_count_per_day is not None:
            self.max_avg_open_count_per_day = max_avg_open_count_per_day

    @property
    def enabled(self):
        """Gets the enabled of this SpaceFilePopularityConfiguration.  # noqa: E501

        If true, collecting file-popularity mechanism in the space is enabled.  # noqa: E501

        :return: The enabled of this SpaceFilePopularityConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SpaceFilePopularityConfiguration.

        If true, collecting file-popularity mechanism in the space is enabled.  # noqa: E501

        :param enabled: The enabled of this SpaceFilePopularityConfiguration.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def example_query(self):
        """Gets the example_query of this SpaceFilePopularityConfiguration.  # noqa: E501

        Example `curl` command that can be executed to query the file-popularity view in the space.   # noqa: E501

        :return: The example_query of this SpaceFilePopularityConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._example_query

    @example_query.setter
    def example_query(self, example_query):
        """Sets the example_query of this SpaceFilePopularityConfiguration.

        Example `curl` command that can be executed to query the file-popularity view in the space.   # noqa: E501

        :param example_query: The example_query of this SpaceFilePopularityConfiguration.  # noqa: E501
        :type: str
        """

        self._example_query = example_query

    @property
    def last_open_hour_weight(self):
        """Gets the last_open_hour_weight of this SpaceFilePopularityConfiguration.  # noqa: E501

        Weight of `lastOpenHour` parameter.   # noqa: E501

        :return: The last_open_hour_weight of this SpaceFilePopularityConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._last_open_hour_weight

    @last_open_hour_weight.setter
    def last_open_hour_weight(self, last_open_hour_weight):
        """Sets the last_open_hour_weight of this SpaceFilePopularityConfiguration.

        Weight of `lastOpenHour` parameter.   # noqa: E501

        :param last_open_hour_weight: The last_open_hour_weight of this SpaceFilePopularityConfiguration.  # noqa: E501
        :type: float
        """

        self._last_open_hour_weight = last_open_hour_weight

    @property
    def avg_open_count_per_day_weight(self):
        """Gets the avg_open_count_per_day_weight of this SpaceFilePopularityConfiguration.  # noqa: E501

        Weight of `avgOpenCountPerDayWeight` parameter.   # noqa: E501

        :return: The avg_open_count_per_day_weight of this SpaceFilePopularityConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._avg_open_count_per_day_weight

    @avg_open_count_per_day_weight.setter
    def avg_open_count_per_day_weight(self, avg_open_count_per_day_weight):
        """Sets the avg_open_count_per_day_weight of this SpaceFilePopularityConfiguration.

        Weight of `avgOpenCountPerDayWeight` parameter.   # noqa: E501

        :param avg_open_count_per_day_weight: The avg_open_count_per_day_weight of this SpaceFilePopularityConfiguration.  # noqa: E501
        :type: float
        """

        self._avg_open_count_per_day_weight = avg_open_count_per_day_weight

    @property
    def max_avg_open_count_per_day(self):
        """Gets the max_avg_open_count_per_day of this SpaceFilePopularityConfiguration.  # noqa: E501

        Maximal value of average open count per day taken to calculate the value of popularity function.   # noqa: E501

        :return: The max_avg_open_count_per_day of this SpaceFilePopularityConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._max_avg_open_count_per_day

    @max_avg_open_count_per_day.setter
    def max_avg_open_count_per_day(self, max_avg_open_count_per_day):
        """Sets the max_avg_open_count_per_day of this SpaceFilePopularityConfiguration.

        Maximal value of average open count per day taken to calculate the value of popularity function.   # noqa: E501

        :param max_avg_open_count_per_day: The max_avg_open_count_per_day of this SpaceFilePopularityConfiguration.  # noqa: E501
        :type: float
        """

        self._max_avg_open_count_per_day = max_avg_open_count_per_day

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpaceFilePopularityConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpaceFilePopularityConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
