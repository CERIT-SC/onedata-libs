# coding: utf-8

"""
    Onepanel

    # Overview  This is the RESTful API definition of **Onepanel** component of Onedata data management system [onedata.org](http://onedata.org).  > This API is defined using [Swagger](http://swagger.io/), the JSON specification can be used to automatically generate client libraries -   [swagger.json](../../../swagger/onepanel/swagger.json).  This API allows control and configuration of local Onedata deployment, in particular full control over the **Onezone** and **Oneprovider** services and their distribution and monitoring on the local resources.  The API is grouped into 3 categories of operations:   * **Onepanel** - for common operations   * **Oneprovider** - for Oneprovider specific administrative operations   * **Onezone** - for Onezone specific administrative operations  Each of these components is composed of the following services:   * **Worker services** - these are available under `/zone/workers` and     `/provider/workers` paths,   * **Databases services** - each Onedata component stores it's metadata in a     Couchbase backend, which can be distributed on any number of nodes, these     are available under `/zone/databases` and `/provider/databases` paths,   * **Cluster manager services** - this is a service which controls other     deployed processes in one site, these are availables under these are     available under `/zone/managers` and `/provider/managers` paths.  **Onezone** and **Oneprovider** components are composed of 3 types of services: **managers**, **databases** and **workers**.  Using this API each of these components can be deployed, configured, started and stopped on a specified host in the local site, in the context of either **Onezone** or **Oneprovider** service.  All paths listed in this documentation are relative to the base Onepanel REST API which is `/api/v3/onepanel`, so complete URL for a request to Onepanel service is:  ``` http://HOSTNAME:PORT/api/v3/onepanel/... ```  ## Authentication  ### Token authentication  The recommended, safest way of authenticating requests to Onepanel API is using the **Onedata access tokens**. The token should be present in `X-Auth-Token` or `Authorization: Bearer` header. See [Onezone documentation](/#/home/api/latest/onezone?anchor=section/Overview/Authentication-and-authorization) for detailed explanation of the token concepts.  Curl examples: ```bash curl -H \"X-Auth-Token: $TOKEN\" [...] curl -H \"Authorization: Bearer $TOKEN\" [...] curl -H \"Macaroon: $TOKEN\" [...]   # DEPRECATED ```   ### Passphrase authentication  The token authentication dependes on the Onezone service. In special cases - during Onezone deployment or its outage - it is necessary to use the local **emergency passphrase**.  The passphrase should be provided in a Basic authentication header with username `onepanel`. For curl users this means ```bash curl -u onepanel:TheEmergencyPassphrase ```  The passphrase can also be sent without any username, as the whole content of base64-encoded string in Basic authorization header, e.g. ```bash curl -H \"Authorization: Basic $(echo -n TheEmergencyPassphrase | base64)\" ```  The passphrase is set during deployment. It can be changed in the Onepanel GUI or with an API request: ```bash curl -X PUT 'https://$PANEL_HOST:9443/api/v3/onepanel/emergency_passphrase' \\ -u onepanel:TheEmergencyPassphrase -H 'Content-Type: application/json' \\ -d '{\"currentPassphrase\": \"TheEmergencyPassphrase\", \"newPassphrase\": \"TheNewPassphrase\"}' ```  ## API structure  The Onepanel API is structured to reflect that it can either be used to control **Onezone** or **Oneprovider** deployment, each Onedata component deployment has a separate Onepanel instance. In order to make the API calls explicit, **Onezone** or **Oneprovider** specific requests have different paths, i.e.:   * Onezone specific operations start with `/api/v3/onepanel/zone/`   * Oneprovider specific operations start with `/api/v3/onepanel/provider/`   * Common operations paths include `/api/v3/onepanel/users`,     `/api/v3/onepanel/hosts` and `/api/v3/onepanel/tasks`  The overall configuration of each component can be controlled by updating `/api/v3/onepanel/zone/configuration` and `/api/v3/onepanel/provider/configuration` resources.  ## Examples  Below are some example requests to Onepanel using cURL:  **Add storage resource to provider** ```bash curl -X POST -u onepanel:Passphrase1 -k -vvv -H \"content-type: application/json\" \\ -d '{\"NFS\": {\"type\": \"posix\", \"mountPoint\": \"/mnt/vfs\"}}' \\ https://172.17.0.4:9443/api/v3/onepanel/provider/storages ```  **Add a new Onezone worker** ```bash curl -X POST -u onepanel:Passphrase1 -k -vvv -H \"content-type: application/json\" \\ -d '{\"hosts\": [\"node1.p1.1.dev\"]}' \\ https://172.17.0.4:9443/api/v3/onepanel/zone/workers ```   # noqa: E501

    OpenAPI spec version: 21.02.3
    Contact: info@onedata.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DnsCheckResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'summary': 'str',
        'expected': 'list[str]',
        'got': 'list[str]',
        'recommended': 'list[str]'
    }

    attribute_map = {
        'summary': 'summary',
        'expected': 'expected',
        'got': 'got',
        'recommended': 'recommended'
    }

    def __init__(self, summary=None, expected=None, got=None, recommended=None):  # noqa: E501
        """DnsCheckResult - a model defined in Swagger"""  # noqa: E501
        self._summary = None
        self._expected = None
        self._got = None
        self._recommended = None
        self.discriminator = None
        self.summary = summary
        self.expected = expected
        self.got = got
        self.recommended = recommended

    @property
    def summary(self):
        """Gets the summary of this DnsCheckResult.  # noqa: E501

        An interpretation of results obtained from DNS check. Possible values are: 'unresolvable' - query returned empty results; 'missing_records' - only some of the expected results were returned; 'bad_records' - none of the expected results were returned; 'ok' - all of expected values were present in obtained results.   # noqa: E501

        :return: The summary of this DnsCheckResult.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this DnsCheckResult.

        An interpretation of results obtained from DNS check. Possible values are: 'unresolvable' - query returned empty results; 'missing_records' - only some of the expected results were returned; 'bad_records' - none of the expected results were returned; 'ok' - all of expected values were present in obtained results.   # noqa: E501

        :param summary: The summary of this DnsCheckResult.  # noqa: E501
        :type: str
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")  # noqa: E501
        allowed_values = ["unresolvable", "missing_records", "bad_records", "ok"]  # noqa: E501
        if summary not in allowed_values:
            raise ValueError(
                "Invalid value for `summary` ({0}), must be one of {1}"  # noqa: E501
                .format(summary, allowed_values)
            )

        self._summary = summary

    @property
    def expected(self):
        """Gets the expected of this DnsCheckResult.  # noqa: E501

        List of expected query results.  # noqa: E501

        :return: The expected of this DnsCheckResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._expected

    @expected.setter
    def expected(self, expected):
        """Sets the expected of this DnsCheckResult.

        List of expected query results.  # noqa: E501

        :param expected: The expected of this DnsCheckResult.  # noqa: E501
        :type: list[str]
        """
        if expected is None:
            raise ValueError("Invalid value for `expected`, must not be `None`")  # noqa: E501

        self._expected = expected

    @property
    def got(self):
        """Gets the got of this DnsCheckResult.  # noqa: E501

        List of obtained query results.  # noqa: E501

        :return: The got of this DnsCheckResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._got

    @got.setter
    def got(self, got):
        """Sets the got of this DnsCheckResult.

        List of obtained query results.  # noqa: E501

        :param got: The got of this DnsCheckResult.  # noqa: E501
        :type: list[str]
        """
        if got is None:
            raise ValueError("Invalid value for `got`, must not be `None`")  # noqa: E501

        self._got = got

    @property
    def recommended(self):
        """Gets the recommended of this DnsCheckResult.  # noqa: E501

        List of suggested DNS records to set at your DNS provider to fulfill this check. Each record is provided in the format of BIND server.  # noqa: E501

        :return: The recommended of this DnsCheckResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._recommended

    @recommended.setter
    def recommended(self, recommended):
        """Sets the recommended of this DnsCheckResult.

        List of suggested DNS records to set at your DNS provider to fulfill this check. Each record is provided in the format of BIND server.  # noqa: E501

        :param recommended: The recommended of this DnsCheckResult.  # noqa: E501
        :type: list[str]
        """
        if recommended is None:
            raise ValueError("Invalid value for `recommended`, must not be `None`")  # noqa: E501

        self._recommended = recommended

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DnsCheckResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DnsCheckResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
