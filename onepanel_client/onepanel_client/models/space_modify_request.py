# coding: utf-8

"""
    Onepanel

    # Overview  This is the RESTful API definition of **Onepanel** component of Onedata data management system [onedata.org](http://onedata.org).  > This API is defined using [Swagger](http://swagger.io/), the JSON specification can be used to automatically generate client libraries -   [swagger.json](../../../swagger/onepanel/swagger.json).  This API allows control and configuration of local Onedata deployment, in particular full control over the **Onezone** and **Oneprovider** services and their distribution and monitoring on the local resources.  The API is grouped into 3 categories of operations:   * **Onepanel** - for common operations   * **Oneprovider** - for Oneprovider specific administrative operations   * **Onezone** - for Onezone specific administrative operations  Each of these components is composed of the following services:   * **Worker services** - these are available under `/zone/workers` and     `/provider/workers` paths,   * **Databases services** - each Onedata component stores it's metadata in a     Couchbase backend, which can be distributed on any number of nodes, these     are available under `/zone/databases` and `/provider/databases` paths,   * **Cluster manager services** - this is a service which controls other     deployed processes in one site, these are availables under these are     available under `/zone/managers` and `/provider/managers` paths.  **Onezone** and **Oneprovider** components are composed of 3 types of services: **managers**, **databases** and **workers**.  Using this API each of these components can be deployed, configured, started and stopped on a specified host in the local site, in the context of either **Onezone** or **Oneprovider** service.  All paths listed in this documentation are relative to the base Onepanel REST API which is `/api/v3/onepanel`, so complete URL for a request to Onepanel service is:  ``` http://HOSTNAME:PORT/api/v3/onepanel/... ```  ## Authentication  ### Token authentication  The recommended, safest way of authenticating requests to Onepanel API is using the **Onedata access tokens**. The token should be present in `X-Auth-Token` or `Authorization: Bearer` header. See [Onezone documentation](/#/home/api/latest/onezone?anchor=section/Overview/Authentication-and-authorization) for detailed explanation of the token concepts.  Curl examples: ```bash curl -H \"X-Auth-Token: $TOKEN\" [...] curl -H \"Authorization: Bearer $TOKEN\" [...] curl -H \"Macaroon: $TOKEN\" [...]   # DEPRECATED ```   ### Passphrase authentication  The token authentication dependes on the Onezone service. In special cases - during Onezone deployment or its outage - it is necessary to use the local **emergency passphrase**.  The passphrase should be provided in a Basic authentication header with username `onepanel`. For curl users this means ```bash curl -u onepanel:TheEmergencyPassphrase ```  The passphrase can also be sent without any username, as the whole content of base64-encoded string in Basic authorization header, e.g. ```bash curl -H \"Authorization: Basic $(echo -n TheEmergencyPassphrase | base64)\" ```  The passphrase is set during deployment. It can be changed in the Onepanel GUI or with an API request: ```bash curl -X PUT 'https://$PANEL_HOST:9443/api/v3/onepanel/emergency_passphrase' \\ -u onepanel:TheEmergencyPassphrase -H 'Content-Type: application/json' \\ -d '{\"currentPassphrase\": \"TheEmergencyPassphrase\", \"newPassphrase\": \"TheNewPassphrase\"}' ```  ## API structure  The Onepanel API is structured to reflect that it can either be used to control **Onezone** or **Oneprovider** deployment, each Onedata component deployment has a separate Onepanel instance. In order to make the API calls explicit, **Onezone** or **Oneprovider** specific requests have different paths, i.e.:   * Onezone specific operations start with `/api/v3/onepanel/zone/`   * Oneprovider specific operations start with `/api/v3/onepanel/provider/`   * Common operations paths include `/api/v3/onepanel/users`,     `/api/v3/onepanel/hosts` and `/api/v3/onepanel/tasks`  The overall configuration of each component can be controlled by updating `/api/v3/onepanel/zone/configuration` and `/api/v3/onepanel/provider/configuration` resources.  ## Examples  Below are some example requests to Onepanel using cURL:  **Add storage resource to provider** ```bash curl -X POST -u onepanel:Passphrase1 -k -vvv -H \"content-type: application/json\" \\ -d '{\"NFS\": {\"type\": \"posix\", \"mountPoint\": \"/mnt/vfs\"}}' \\ https://172.17.0.4:9443/api/v3/onepanel/provider/storages ```  **Add a new Onezone worker** ```bash curl -X POST -u onepanel:Passphrase1 -k -vvv -H \"content-type: application/json\" \\ -d '{\"hosts\": [\"node1.p1.1.dev\"]}' \\ https://172.17.0.4:9443/api/v3/onepanel/zone/workers ```   # noqa: E501

    OpenAPI spec version: 21.02.3
    Contact: info@onedata.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SpaceModifyRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'size': 'int',
        'auto_storage_import_config': 'AutoStorageImportConfig',
        'accounting_enabled': 'bool',
        'dir_stats_service_enabled': 'bool'
    }

    attribute_map = {
        'size': 'size',
        'auto_storage_import_config': 'autoStorageImportConfig',
        'accounting_enabled': 'accountingEnabled',
        'dir_stats_service_enabled': 'dirStatsServiceEnabled'
    }

    def __init__(self, size=None, auto_storage_import_config=None, accounting_enabled=None, dir_stats_service_enabled=None):  # noqa: E501
        """SpaceModifyRequest - a model defined in Swagger"""  # noqa: E501
        self._size = None
        self._auto_storage_import_config = None
        self._accounting_enabled = None
        self._dir_stats_service_enabled = None
        self.discriminator = None
        if size is not None:
            self.size = size
        if auto_storage_import_config is not None:
            self.auto_storage_import_config = auto_storage_import_config
        if accounting_enabled is not None:
            self.accounting_enabled = accounting_enabled
        if dir_stats_service_enabled is not None:
            self.dir_stats_service_enabled = dir_stats_service_enabled

    @property
    def size(self):
        """Gets the size of this SpaceModifyRequest.  # noqa: E501

        The storage space size in bytes that provider is willing to assign to the space.   # noqa: E501

        :return: The size of this SpaceModifyRequest.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this SpaceModifyRequest.

        The storage space size in bytes that provider is willing to assign to the space.   # noqa: E501

        :param size: The size of this SpaceModifyRequest.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def auto_storage_import_config(self):
        """Gets the auto_storage_import_config of this SpaceModifyRequest.  # noqa: E501


        :return: The auto_storage_import_config of this SpaceModifyRequest.  # noqa: E501
        :rtype: AutoStorageImportConfig
        """
        return self._auto_storage_import_config

    @auto_storage_import_config.setter
    def auto_storage_import_config(self, auto_storage_import_config):
        """Sets the auto_storage_import_config of this SpaceModifyRequest.


        :param auto_storage_import_config: The auto_storage_import_config of this SpaceModifyRequest.  # noqa: E501
        :type: AutoStorageImportConfig
        """

        self._auto_storage_import_config = auto_storage_import_config

    @property
    def accounting_enabled(self):
        """Gets the accounting_enabled of this SpaceModifyRequest.  # noqa: E501

        Indicates if accounting is enabled. The accounting mechanism utilizes directory  statistics to keep track of quota usage within a space for the corresponding  supporting provider.   # noqa: E501

        :return: The accounting_enabled of this SpaceModifyRequest.  # noqa: E501
        :rtype: bool
        """
        return self._accounting_enabled

    @accounting_enabled.setter
    def accounting_enabled(self, accounting_enabled):
        """Sets the accounting_enabled of this SpaceModifyRequest.

        Indicates if accounting is enabled. The accounting mechanism utilizes directory  statistics to keep track of quota usage within a space for the corresponding  supporting provider.   # noqa: E501

        :param accounting_enabled: The accounting_enabled of this SpaceModifyRequest.  # noqa: E501
        :type: bool
        """

        self._accounting_enabled = accounting_enabled

    @property
    def dir_stats_service_enabled(self):
        """Gets the dir_stats_service_enabled of this SpaceModifyRequest.  # noqa: E501

        Indicates if the directory statistics service is enabled.  The service gathers statistics concerning logical and physical directory size, file count and update times. It cannot be disabled if accounting is enabled.   # noqa: E501

        :return: The dir_stats_service_enabled of this SpaceModifyRequest.  # noqa: E501
        :rtype: bool
        """
        return self._dir_stats_service_enabled

    @dir_stats_service_enabled.setter
    def dir_stats_service_enabled(self, dir_stats_service_enabled):
        """Sets the dir_stats_service_enabled of this SpaceModifyRequest.

        Indicates if the directory statistics service is enabled.  The service gathers statistics concerning logical and physical directory size, file count and update times. It cannot be disabled if accounting is enabled.   # noqa: E501

        :param dir_stats_service_enabled: The dir_stats_service_enabled of this SpaceModifyRequest.  # noqa: E501
        :type: bool
        """

        self._dir_stats_service_enabled = dir_stats_service_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpaceModifyRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpaceModifyRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
