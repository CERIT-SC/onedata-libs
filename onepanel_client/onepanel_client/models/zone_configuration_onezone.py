# coding: utf-8

"""
    Onepanel

    # Overview  This is the RESTful API definition of **Onepanel** component of Onedata data management system [onedata.org](http://onedata.org).  > This API is defined using [Swagger](http://swagger.io/), the JSON specification can be used to automatically generate client libraries -   [swagger.json](../../../swagger/onepanel/swagger.json).  This API allows control and configuration of local Onedata deployment, in particular full control over the **Onezone** and **Oneprovider** services and their distribution and monitoring on the local resources.  The API is grouped into 3 categories of operations:   * **Onepanel** - for common operations   * **Oneprovider** - for Oneprovider specific administrative operations   * **Onezone** - for Onezone specific administrative operations  Each of these components is composed of the following services:   * **Worker services** - these are available under `/zone/workers` and     `/provider/workers` paths,   * **Databases services** - each Onedata component stores it's metadata in a     Couchbase backend, which can be distributed on any number of nodes, these     are available under `/zone/databases` and `/provider/databases` paths,   * **Cluster manager services** - this is a service which controls other     deployed processes in one site, these are availables under these are     available under `/zone/managers` and `/provider/managers` paths.  **Onezone** and **Oneprovider** components are composed of 3 types of services: **managers**, **databases** and **workers**.  Using this API each of these components can be deployed, configured, started and stopped on a specified host in the local site, in the context of either **Onezone** or **Oneprovider** service.  All paths listed in this documentation are relative to the base Onepanel REST API which is `/api/v3/onepanel`, so complete URL for a request to Onepanel service is:  ``` http://HOSTNAME:PORT/api/v3/onepanel/... ```  ## Authentication  ### Token authentication  The recommended, safest way of authenticating requests to Onepanel API is using the **Onedata access tokens**. The token should be present in `X-Auth-Token` or `Authorization: Bearer` header. See [Onezone documentation](/#/home/api/latest/onezone?anchor=section/Overview/Authentication-and-authorization) for detailed explanation of the token concepts.  Curl examples: ```bash curl -H \"X-Auth-Token: $TOKEN\" [...] curl -H \"Authorization: Bearer $TOKEN\" [...] curl -H \"Macaroon: $TOKEN\" [...]   # DEPRECATED ```   ### Passphrase authentication  The token authentication dependes on the Onezone service. In special cases - during Onezone deployment or its outage - it is necessary to use the local **emergency passphrase**.  The passphrase should be provided in a Basic authentication header with username `onepanel`. For curl users this means ```bash curl -u onepanel:TheEmergencyPassphrase ```  The passphrase can also be sent without any username, as the whole content of base64-encoded string in Basic authorization header, e.g. ```bash curl -H \"Authorization: Basic $(echo -n TheEmergencyPassphrase | base64)\" ```  The passphrase is set during deployment. It can be changed in the Onepanel GUI or with an API request: ```bash curl -X PUT 'https://$PANEL_HOST:9443/api/v3/onepanel/emergency_passphrase' \\ -u onepanel:TheEmergencyPassphrase -H 'Content-Type: application/json' \\ -d '{\"currentPassphrase\": \"TheEmergencyPassphrase\", \"newPassphrase\": \"TheNewPassphrase\"}' ```  ## API structure  The Onepanel API is structured to reflect that it can either be used to control **Onezone** or **Oneprovider** deployment, each Onedata component deployment has a separate Onepanel instance. In order to make the API calls explicit, **Onezone** or **Oneprovider** specific requests have different paths, i.e.:   * Onezone specific operations start with `/api/v3/onepanel/zone/`   * Oneprovider specific operations start with `/api/v3/onepanel/provider/`   * Common operations paths include `/api/v3/onepanel/users`,     `/api/v3/onepanel/hosts` and `/api/v3/onepanel/tasks`  The overall configuration of each component can be controlled by updating `/api/v3/onepanel/zone/configuration` and `/api/v3/onepanel/provider/configuration` resources.  ## Examples  Below are some example requests to Onepanel using cURL:  **Add storage resource to provider** ```bash curl -X POST -u onepanel:Passphrase1 -k -vvv -H \"content-type: application/json\" \\ -d '{\"NFS\": {\"type\": \"posix\", \"mountPoint\": \"/mnt/vfs\"}}' \\ https://172.17.0.4:9443/api/v3/onepanel/provider/storages ```  **Add a new Onezone worker** ```bash curl -X POST -u onepanel:Passphrase1 -k -vvv -H \"content-type: application/json\" \\ -d '{\"hosts\": [\"node1.p1.1.dev\"]}' \\ https://172.17.0.4:9443/api/v3/onepanel/zone/workers ```   # noqa: E501

    OpenAPI spec version: 21.02.3
    Contact: info@onedata.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ZoneConfigurationOnezone(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domain_name': 'str',
        'name': 'str',
        'lets_encrypt_enabled': 'bool',
        'built_in_dns_server': 'bool',
        'policies': 'ZonePolicies',
        'users': 'list[OnezoneUserCreateRequest]'
    }

    attribute_map = {
        'domain_name': 'domainName',
        'name': 'name',
        'lets_encrypt_enabled': 'letsEncryptEnabled',
        'built_in_dns_server': 'builtInDnsServer',
        'policies': 'policies',
        'users': 'users'
    }

    def __init__(self, domain_name=None, name=None, lets_encrypt_enabled=False, built_in_dns_server=None, policies=None, users=None):  # noqa: E501
        """ZoneConfigurationOnezone - a model defined in Swagger"""  # noqa: E501
        self._domain_name = None
        self._name = None
        self._lets_encrypt_enabled = None
        self._built_in_dns_server = None
        self._policies = None
        self._users = None
        self.discriminator = None
        self.domain_name = domain_name
        self.name = name
        if lets_encrypt_enabled is not None:
            self.lets_encrypt_enabled = lets_encrypt_enabled
        if built_in_dns_server is not None:
            self.built_in_dns_server = built_in_dns_server
        if policies is not None:
            self.policies = policies
        if users is not None:
            self.users = users

    @property
    def domain_name(self):
        """Gets the domain_name of this ZoneConfigurationOnezone.  # noqa: E501

        The domain of Onezone cluster.  # noqa: E501

        :return: The domain_name of this ZoneConfigurationOnezone.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this ZoneConfigurationOnezone.

        The domain of Onezone cluster.  # noqa: E501

        :param domain_name: The domain_name of this ZoneConfigurationOnezone.  # noqa: E501
        :type: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")  # noqa: E501

        self._domain_name = domain_name

    @property
    def name(self):
        """Gets the name of this ZoneConfigurationOnezone.  # noqa: E501

        The Onezone cluster name.  # noqa: E501

        :return: The name of this ZoneConfigurationOnezone.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ZoneConfigurationOnezone.

        The Onezone cluster name.  # noqa: E501

        :param name: The name of this ZoneConfigurationOnezone.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def lets_encrypt_enabled(self):
        """Gets the lets_encrypt_enabled of this ZoneConfigurationOnezone.  # noqa: E501

        If enabled the zone will use Let's Encrypt service to obtain SSL certificates. Otherwise certificates must be manually provided. By enabling this option you agree to the Let's Encrypt Subscriber Agreement.   # noqa: E501

        :return: The lets_encrypt_enabled of this ZoneConfigurationOnezone.  # noqa: E501
        :rtype: bool
        """
        return self._lets_encrypt_enabled

    @lets_encrypt_enabled.setter
    def lets_encrypt_enabled(self, lets_encrypt_enabled):
        """Sets the lets_encrypt_enabled of this ZoneConfigurationOnezone.

        If enabled the zone will use Let's Encrypt service to obtain SSL certificates. Otherwise certificates must be manually provided. By enabling this option you agree to the Let's Encrypt Subscriber Agreement.   # noqa: E501

        :param lets_encrypt_enabled: The lets_encrypt_enabled of this ZoneConfigurationOnezone.  # noqa: E501
        :type: bool
        """

        self._lets_encrypt_enabled = lets_encrypt_enabled

    @property
    def built_in_dns_server(self):
        """Gets the built_in_dns_server of this ZoneConfigurationOnezone.  # noqa: E501

        If true, DNS check will verify that control of DNS zone for Onezone's domain was delegated to the DNS server built into Onezone service.   # noqa: E501

        :return: The built_in_dns_server of this ZoneConfigurationOnezone.  # noqa: E501
        :rtype: bool
        """
        return self._built_in_dns_server

    @built_in_dns_server.setter
    def built_in_dns_server(self, built_in_dns_server):
        """Sets the built_in_dns_server of this ZoneConfigurationOnezone.

        If true, DNS check will verify that control of DNS zone for Onezone's domain was delegated to the DNS server built into Onezone service.   # noqa: E501

        :param built_in_dns_server: The built_in_dns_server of this ZoneConfigurationOnezone.  # noqa: E501
        :type: bool
        """

        self._built_in_dns_server = built_in_dns_server

    @property
    def policies(self):
        """Gets the policies of this ZoneConfigurationOnezone.  # noqa: E501


        :return: The policies of this ZoneConfigurationOnezone.  # noqa: E501
        :rtype: ZonePolicies
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """Sets the policies of this ZoneConfigurationOnezone.


        :param policies: The policies of this ZoneConfigurationOnezone.  # noqa: E501
        :type: ZonePolicies
        """

        self._policies = policies

    @property
    def users(self):
        """Gets the users of this ZoneConfigurationOnezone.  # noqa: E501

        List of Onezone user specifications.  # noqa: E501

        :return: The users of this ZoneConfigurationOnezone.  # noqa: E501
        :rtype: list[OnezoneUserCreateRequest]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this ZoneConfigurationOnezone.

        List of Onezone user specifications.  # noqa: E501

        :param users: The users of this ZoneConfigurationOnezone.  # noqa: E501
        :type: list[OnezoneUserCreateRequest]
        """

        self._users = users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ZoneConfigurationOnezone, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ZoneConfigurationOnezone):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
