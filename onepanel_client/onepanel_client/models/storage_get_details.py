# coding: utf-8

"""
    Onepanel

    # Overview  This is the RESTful API definition of **Onepanel** component of Onedata data management system [onedata.org](http://onedata.org).  > This API is defined using [Swagger](http://swagger.io/), the JSON specification can be used to automatically generate client libraries -   [swagger.json](../../../swagger/onepanel/swagger.json).  This API allows control and configuration of local Onedata deployment, in particular full control over the **Onezone** and **Oneprovider** services and their distribution and monitoring on the local resources.  The API is grouped into 3 categories of operations:   * **Onepanel** - for common operations   * **Oneprovider** - for Oneprovider specific administrative operations   * **Onezone** - for Onezone specific administrative operations  Each of these components is composed of the following services:   * **Worker services** - these are available under `/zone/workers` and     `/provider/workers` paths,   * **Databases services** - each Onedata component stores it's metadata in a     Couchbase backend, which can be distributed on any number of nodes, these     are available under `/zone/databases` and `/provider/databases` paths,   * **Cluster manager services** - this is a service which controls other     deployed processes in one site, these are availables under these are     available under `/zone/managers` and `/provider/managers` paths.  **Onezone** and **Oneprovider** components are composed of 3 types of services: **managers**, **databases** and **workers**.  Using this API each of these components can be deployed, configured, started and stopped on a specified host in the local site, in the context of either **Onezone** or **Oneprovider** service.  All paths listed in this documentation are relative to the base Onepanel REST API which is `/api/v3/onepanel`, so complete URL for a request to Onepanel service is:  ``` http://HOSTNAME:PORT/api/v3/onepanel/... ```  ## Authentication  ### Token authentication  The recommended, safest way of authenticating requests to Onepanel API is using the **Onedata access tokens**. The token should be present in `X-Auth-Token` or `Authorization: Bearer` header. See [Onezone documentation](/#/home/api/latest/onezone?anchor=section/Overview/Authentication-and-authorization) for detailed explanation of the token concepts.  Curl examples: ```bash curl -H \"X-Auth-Token: $TOKEN\" [...] curl -H \"Authorization: Bearer $TOKEN\" [...] curl -H \"Macaroon: $TOKEN\" [...]   # DEPRECATED ```   ### Passphrase authentication  The token authentication dependes on the Onezone service. In special cases - during Onezone deployment or its outage - it is necessary to use the local **emergency passphrase**.  The passphrase should be provided in a Basic authentication header with username `onepanel`. For curl users this means ```bash curl -u onepanel:TheEmergencyPassphrase ```  The passphrase can also be sent without any username, as the whole content of base64-encoded string in Basic authorization header, e.g. ```bash curl -H \"Authorization: Basic $(echo -n TheEmergencyPassphrase | base64)\" ```  The passphrase is set during deployment. It can be changed in the Onepanel GUI or with an API request: ```bash curl -X PUT 'https://$PANEL_HOST:9443/api/v3/onepanel/emergency_passphrase' \\ -u onepanel:TheEmergencyPassphrase -H 'Content-Type: application/json' \\ -d '{\"currentPassphrase\": \"TheEmergencyPassphrase\", \"newPassphrase\": \"TheNewPassphrase\"}' ```  ## API structure  The Onepanel API is structured to reflect that it can either be used to control **Onezone** or **Oneprovider** deployment, each Onedata component deployment has a separate Onepanel instance. In order to make the API calls explicit, **Onezone** or **Oneprovider** specific requests have different paths, i.e.:   * Onezone specific operations start with `/api/v3/onepanel/zone/`   * Oneprovider specific operations start with `/api/v3/onepanel/provider/`   * Common operations paths include `/api/v3/onepanel/users`,     `/api/v3/onepanel/hosts` and `/api/v3/onepanel/tasks`  The overall configuration of each component can be controlled by updating `/api/v3/onepanel/zone/configuration` and `/api/v3/onepanel/provider/configuration` resources.  ## Examples  Below are some example requests to Onepanel using cURL:  **Add storage resource to provider** ```bash curl -X POST -u onepanel:Passphrase1 -k -vvv -H \"content-type: application/json\" \\ -d '{\"NFS\": {\"type\": \"posix\", \"mountPoint\": \"/mnt/vfs\"}}' \\ https://172.17.0.4:9443/api/v3/onepanel/provider/storages ```  **Add a new Onezone worker** ```bash curl -X POST -u onepanel:Passphrase1 -k -vvv -H \"content-type: application/json\" \\ -d '{\"hosts\": [\"node1.p1.1.dev\"]}' \\ https://172.17.0.4:9443/api/v3/onepanel/zone/workers ```   # noqa: E501

    OpenAPI spec version: 21.02.3
    Contact: info@onedata.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StorageGetDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'str',
        'name': 'str',
        'verification_passed': 'bool',
        'timeout': 'int',
        'skip_storage_detection': 'bool',
        'luma_feed': 'str',
        'luma_feed_url': 'str',
        'luma_feed_api_key': 'str',
        'qos_parameters': 'dict(str, str)',
        'imported_storage': 'bool',
        'archive_storage': 'bool',
        'readonly': 'bool'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'name': 'name',
        'verification_passed': 'verificationPassed',
        'timeout': 'timeout',
        'skip_storage_detection': 'skipStorageDetection',
        'luma_feed': 'lumaFeed',
        'luma_feed_url': 'lumaFeedUrl',
        'luma_feed_api_key': 'lumaFeedApiKey',
        'qos_parameters': 'qosParameters',
        'imported_storage': 'importedStorage',
        'archive_storage': 'archiveStorage',
        'readonly': 'readonly'
    }

    discriminator_value_class_map = {
          'Glusterfs': 'Glusterfs',
'Swift': 'Swift',
'S3': 'S3',
'Nulldevice': 'Nulldevice',
'Cephrados': 'Cephrados',
'NFS': 'NFS',
'HTTP': 'HTTP',
'Embeddedceph': 'Embeddedceph',
'XRootD': 'XRootD',
'Webdav': 'Webdav',
'Posix': 'Posix'    }

    def __init__(self, type=None, id=None, name=None, verification_passed=None, timeout=None, skip_storage_detection=None, luma_feed=None, luma_feed_url=None, luma_feed_api_key=None, qos_parameters=None, imported_storage=False, archive_storage=False, readonly=False):  # noqa: E501
        """StorageGetDetails - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._id = None
        self._name = None
        self._verification_passed = None
        self._timeout = None
        self._skip_storage_detection = None
        self._luma_feed = None
        self._luma_feed_url = None
        self._luma_feed_api_key = None
        self._qos_parameters = None
        self._imported_storage = None
        self._archive_storage = None
        self._readonly = None
        self.discriminator = 'type'
        if type is not None:
            self.type = type
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if verification_passed is not None:
            self.verification_passed = verification_passed
        if timeout is not None:
            self.timeout = timeout
        if skip_storage_detection is not None:
            self.skip_storage_detection = skip_storage_detection
        if luma_feed is not None:
            self.luma_feed = luma_feed
        if luma_feed_url is not None:
            self.luma_feed_url = luma_feed_url
        if luma_feed_api_key is not None:
            self.luma_feed_api_key = luma_feed_api_key
        if qos_parameters is not None:
            self.qos_parameters = qos_parameters
        if imported_storage is not None:
            self.imported_storage = imported_storage
        if archive_storage is not None:
            self.archive_storage = archive_storage
        if readonly is not None:
            self.readonly = readonly

    @property
    def type(self):
        """Gets the type of this StorageGetDetails.  # noqa: E501


        :return: The type of this StorageGetDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StorageGetDetails.


        :param type: The type of this StorageGetDetails.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def id(self):
        """Gets the id of this StorageGetDetails.  # noqa: E501

        The Id of storage.  # noqa: E501

        :return: The id of this StorageGetDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StorageGetDetails.

        The Id of storage.  # noqa: E501

        :param id: The id of this StorageGetDetails.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this StorageGetDetails.  # noqa: E501

        The name of storage.  # noqa: E501

        :return: The name of this StorageGetDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StorageGetDetails.

        The name of storage.  # noqa: E501

        :param name: The name of this StorageGetDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def verification_passed(self):
        """Gets the verification_passed of this StorageGetDetails.  # noqa: E501

        Result of storage verification (reading and writing a file). Returned only on PATCH requests for read-write storages.  # noqa: E501

        :return: The verification_passed of this StorageGetDetails.  # noqa: E501
        :rtype: bool
        """
        return self._verification_passed

    @verification_passed.setter
    def verification_passed(self, verification_passed):
        """Sets the verification_passed of this StorageGetDetails.

        Result of storage verification (reading and writing a file). Returned only on PATCH requests for read-write storages.  # noqa: E501

        :param verification_passed: The verification_passed of this StorageGetDetails.  # noqa: E501
        :type: bool
        """

        self._verification_passed = verification_passed

    @property
    def timeout(self):
        """Gets the timeout of this StorageGetDetails.  # noqa: E501

        Storage operation timeout in milliseconds.  # noqa: E501

        :return: The timeout of this StorageGetDetails.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this StorageGetDetails.

        Storage operation timeout in milliseconds.  # noqa: E501

        :param timeout: The timeout of this StorageGetDetails.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    @property
    def skip_storage_detection(self):
        """Gets the skip_storage_detection of this StorageGetDetails.  # noqa: E501

        If true, detecting whether storage is directly accessible by the Oneclient will not be performed. This option should be set to true on readonly storages.   # noqa: E501

        :return: The skip_storage_detection of this StorageGetDetails.  # noqa: E501
        :rtype: bool
        """
        return self._skip_storage_detection

    @skip_storage_detection.setter
    def skip_storage_detection(self, skip_storage_detection):
        """Sets the skip_storage_detection of this StorageGetDetails.

        If true, detecting whether storage is directly accessible by the Oneclient will not be performed. This option should be set to true on readonly storages.   # noqa: E501

        :param skip_storage_detection: The skip_storage_detection of this StorageGetDetails.  # noqa: E501
        :type: bool
        """

        self._skip_storage_detection = skip_storage_detection

    @property
    def luma_feed(self):
        """Gets the luma_feed of this StorageGetDetails.  # noqa: E501

        Type of feed for LUMA DB. Feed is a source of user/group mappings used to populate the LUMA DB. For more info please read: https://onedata.org/#/home/documentation/doc/administering_onedata/luma.html   # noqa: E501

        :return: The luma_feed of this StorageGetDetails.  # noqa: E501
        :rtype: str
        """
        return self._luma_feed

    @luma_feed.setter
    def luma_feed(self, luma_feed):
        """Sets the luma_feed of this StorageGetDetails.

        Type of feed for LUMA DB. Feed is a source of user/group mappings used to populate the LUMA DB. For more info please read: https://onedata.org/#/home/documentation/doc/administering_onedata/luma.html   # noqa: E501

        :param luma_feed: The luma_feed of this StorageGetDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["auto", "local", "external"]  # noqa: E501
        if luma_feed not in allowed_values:
            raise ValueError(
                "Invalid value for `luma_feed` ({0}), must be one of {1}"  # noqa: E501
                .format(luma_feed, allowed_values)
            )

        self._luma_feed = luma_feed

    @property
    def luma_feed_url(self):
        """Gets the luma_feed_url of this StorageGetDetails.  # noqa: E501

        URL of external feed for LUMA DB. Relevant only if lumaFeed equals `external`.  # noqa: E501

        :return: The luma_feed_url of this StorageGetDetails.  # noqa: E501
        :rtype: str
        """
        return self._luma_feed_url

    @luma_feed_url.setter
    def luma_feed_url(self, luma_feed_url):
        """Sets the luma_feed_url of this StorageGetDetails.

        URL of external feed for LUMA DB. Relevant only if lumaFeed equals `external`.  # noqa: E501

        :param luma_feed_url: The luma_feed_url of this StorageGetDetails.  # noqa: E501
        :type: str
        """

        self._luma_feed_url = luma_feed_url

    @property
    def luma_feed_api_key(self):
        """Gets the luma_feed_api_key of this StorageGetDetails.  # noqa: E501

        API key checked by external service used as feed for LUMA DB. Relevant only if lumaFeed equals `external`.   # noqa: E501

        :return: The luma_feed_api_key of this StorageGetDetails.  # noqa: E501
        :rtype: str
        """
        return self._luma_feed_api_key

    @luma_feed_api_key.setter
    def luma_feed_api_key(self, luma_feed_api_key):
        """Sets the luma_feed_api_key of this StorageGetDetails.

        API key checked by external service used as feed for LUMA DB. Relevant only if lumaFeed equals `external`.   # noqa: E501

        :param luma_feed_api_key: The luma_feed_api_key of this StorageGetDetails.  # noqa: E501
        :type: str
        """

        self._luma_feed_api_key = luma_feed_api_key

    @property
    def qos_parameters(self):
        """Gets the qos_parameters of this StorageGetDetails.  # noqa: E501

        Map with key-value pairs used for describing storage QoS parameters.  # noqa: E501

        :return: The qos_parameters of this StorageGetDetails.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._qos_parameters

    @qos_parameters.setter
    def qos_parameters(self, qos_parameters):
        """Sets the qos_parameters of this StorageGetDetails.

        Map with key-value pairs used for describing storage QoS parameters.  # noqa: E501

        :param qos_parameters: The qos_parameters of this StorageGetDetails.  # noqa: E501
        :type: dict(str, str)
        """

        self._qos_parameters = qos_parameters

    @property
    def imported_storage(self):
        """Gets the imported_storage of this StorageGetDetails.  # noqa: E501

        Defines whether storage contains existing data to be imported.  # noqa: E501

        :return: The imported_storage of this StorageGetDetails.  # noqa: E501
        :rtype: bool
        """
        return self._imported_storage

    @imported_storage.setter
    def imported_storage(self, imported_storage):
        """Sets the imported_storage of this StorageGetDetails.

        Defines whether storage contains existing data to be imported.  # noqa: E501

        :param imported_storage: The imported_storage of this StorageGetDetails.  # noqa: E501
        :type: bool
        """

        self._imported_storage = imported_storage

    @property
    def archive_storage(self):
        """Gets the archive_storage of this StorageGetDetails.  # noqa: E501

        Defines whether storage supports long-term dataset archiving.   # noqa: E501

        :return: The archive_storage of this StorageGetDetails.  # noqa: E501
        :rtype: bool
        """
        return self._archive_storage

    @archive_storage.setter
    def archive_storage(self, archive_storage):
        """Sets the archive_storage of this StorageGetDetails.

        Defines whether storage supports long-term dataset archiving.   # noqa: E501

        :param archive_storage: The archive_storage of this StorageGetDetails.  # noqa: E501
        :type: bool
        """

        self._archive_storage = archive_storage

    @property
    def readonly(self):
        """Gets the readonly of this StorageGetDetails.  # noqa: E501

        Defines whether the storage is readonly. If enabled, Oneprovider will block any operation that writes, modifies or deletes data on the storage. Such storage can only be used to import data into the space. Mandatory to ensure proper behaviour if the backend storage is actually configured as readonly. This option is available only for imported storages.   # noqa: E501

        :return: The readonly of this StorageGetDetails.  # noqa: E501
        :rtype: bool
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly):
        """Sets the readonly of this StorageGetDetails.

        Defines whether the storage is readonly. If enabled, Oneprovider will block any operation that writes, modifies or deletes data on the storage. Such storage can only be used to import data into the space. Mandatory to ensure proper behaviour if the backend storage is actually configured as readonly. This option is available only for imported storages.   # noqa: E501

        :param readonly: The readonly of this StorageGetDetails.  # noqa: E501
        :type: bool
        """

        self._readonly = readonly

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StorageGetDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageGetDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
