# coding: utf-8

"""
    Onepanel

    # Overview  This is the RESTful API definition of **Onepanel** component of Onedata data management system [onedata.org](http://onedata.org).  > This API is defined using [Swagger](http://swagger.io/), the JSON specification can be used to automatically generate client libraries -   [swagger.json](../../../swagger/onepanel/swagger.json).  This API allows control and configuration of local Onedata deployment, in particular full control over the **Onezone** and **Oneprovider** services and their distribution and monitoring on the local resources.  The API is grouped into 3 categories of operations:   * **Onepanel** - for common operations   * **Oneprovider** - for Oneprovider specific administrative operations   * **Onezone** - for Onezone specific administrative operations  Each of these components is composed of the following services:   * **Worker services** - these are available under `/zone/workers` and     `/provider/workers` paths,   * **Databases services** - each Onedata component stores it's metadata in a     Couchbase backend, which can be distributed on any number of nodes, these     are available under `/zone/databases` and `/provider/databases` paths,   * **Cluster manager services** - this is a service which controls other     deployed processes in one site, these are availables under these are     available under `/zone/managers` and `/provider/managers` paths.  **Onezone** and **Oneprovider** components are composed of 3 types of services: **managers**, **databases** and **workers**.  Using this API each of these components can be deployed, configured, started and stopped on a specified host in the local site, in the context of either **Onezone** or **Oneprovider** service.  All paths listed in this documentation are relative to the base Onepanel REST API which is `/api/v3/onepanel`, so complete URL for a request to Onepanel service is:  ``` http://HOSTNAME:PORT/api/v3/onepanel/... ```  ## Authentication  ### Token authentication  The recommended, safest way of authenticating requests to Onepanel API is using the **Onedata access tokens**. The token should be present in `X-Auth-Token` or `Authorization: Bearer` header. See [Onezone documentation](/#/home/api/latest/onezone?anchor=section/Overview/Authentication-and-authorization) for detailed explanation of the token concepts.  Curl examples: ```bash curl -H \"X-Auth-Token: $TOKEN\" [...] curl -H \"Authorization: Bearer $TOKEN\" [...] curl -H \"Macaroon: $TOKEN\" [...]   # DEPRECATED ```   ### Passphrase authentication  The token authentication dependes on the Onezone service. In special cases - during Onezone deployment or its outage - it is necessary to use the local **emergency passphrase**.  The passphrase should be provided in a Basic authentication header with username `onepanel`. For curl users this means ```bash curl -u onepanel:TheEmergencyPassphrase ```  The passphrase can also be sent without any username, as the whole content of base64-encoded string in Basic authorization header, e.g. ```bash curl -H \"Authorization: Basic $(echo -n TheEmergencyPassphrase | base64)\" ```  The passphrase is set during deployment. It can be changed in the Onepanel GUI or with an API request: ```bash curl -X PUT 'https://$PANEL_HOST:9443/api/v3/onepanel/emergency_passphrase' \\ -u onepanel:TheEmergencyPassphrase -H 'Content-Type: application/json' \\ -d '{\"currentPassphrase\": \"TheEmergencyPassphrase\", \"newPassphrase\": \"TheNewPassphrase\"}' ```  ## API structure  The Onepanel API is structured to reflect that it can either be used to control **Onezone** or **Oneprovider** deployment, each Onedata component deployment has a separate Onepanel instance. In order to make the API calls explicit, **Onezone** or **Oneprovider** specific requests have different paths, i.e.:   * Onezone specific operations start with `/api/v3/onepanel/zone/`   * Oneprovider specific operations start with `/api/v3/onepanel/provider/`   * Common operations paths include `/api/v3/onepanel/users`,     `/api/v3/onepanel/hosts` and `/api/v3/onepanel/tasks`  The overall configuration of each component can be controlled by updating `/api/v3/onepanel/zone/configuration` and `/api/v3/onepanel/provider/configuration` resources.  ## Examples  Below are some example requests to Onepanel using cURL:  **Add storage resource to provider** ```bash curl -X POST -u onepanel:Passphrase1 -k -vvv -H \"content-type: application/json\" \\ -d '{\"NFS\": {\"type\": \"posix\", \"mountPoint\": \"/mnt/vfs\"}}' \\ https://172.17.0.4:9443/api/v3/onepanel/provider/storages ```  **Add a new Onezone worker** ```bash curl -X POST -u onepanel:Passphrase1 -k -vvv -H \"content-type: application/json\" \\ -d '{\"hosts\": [\"node1.p1.1.dev\"]}' \\ https://172.17.0.4:9443/api/v3/onepanel/zone/workers ```   # noqa: E501

    OpenAPI spec version: 21.02.3
    Contact: info@onedata.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from setuptools import setup, find_packages  # noqa: H301

NAME = "onepanel_client"
VERSION = "1.0.0"
# To install the library, run the following
#
# python setup.py install
#
# prerequisite: setuptools
# http://pypi.python.org/pypi/setuptools

REQUIRES = ["urllib3 >= 1.15", "six >= 1.10", "certifi", "python-dateutil"]

setup(
    name=NAME,
    version=VERSION,
    description="Onepanel",
    author_email="info@onedata.org",
    url="",
    keywords=["Swagger", "Onepanel"],
    install_requires=REQUIRES,
    packages=find_packages(),
    include_package_data=True,
    long_description="""\
    # Overview  This is the RESTful API definition of **Onepanel** component of Onedata data management system [onedata.org](http://onedata.org).  &gt; This API is defined using [Swagger](http://swagger.io/), the JSON specification can be used to automatically generate client libraries -   [swagger.json](../../../swagger/onepanel/swagger.json).  This API allows control and configuration of local Onedata deployment, in particular full control over the **Onezone** and **Oneprovider** services and their distribution and monitoring on the local resources.  The API is grouped into 3 categories of operations:   * **Onepanel** - for common operations   * **Oneprovider** - for Oneprovider specific administrative operations   * **Onezone** - for Onezone specific administrative operations  Each of these components is composed of the following services:   * **Worker services** - these are available under &#x60;/zone/workers&#x60; and     &#x60;/provider/workers&#x60; paths,   * **Databases services** - each Onedata component stores it&#x27;s metadata in a     Couchbase backend, which can be distributed on any number of nodes, these     are available under &#x60;/zone/databases&#x60; and &#x60;/provider/databases&#x60; paths,   * **Cluster manager services** - this is a service which controls other     deployed processes in one site, these are availables under these are     available under &#x60;/zone/managers&#x60; and &#x60;/provider/managers&#x60; paths.  **Onezone** and **Oneprovider** components are composed of 3 types of services: **managers**, **databases** and **workers**.  Using this API each of these components can be deployed, configured, started and stopped on a specified host in the local site, in the context of either **Onezone** or **Oneprovider** service.  All paths listed in this documentation are relative to the base Onepanel REST API which is &#x60;/api/v3/onepanel&#x60;, so complete URL for a request to Onepanel service is:  &#x60;&#x60;&#x60; http://HOSTNAME:PORT/api/v3/onepanel/... &#x60;&#x60;&#x60;  ## Authentication  ### Token authentication  The recommended, safest way of authenticating requests to Onepanel API is using the **Onedata access tokens**. The token should be present in &#x60;X-Auth-Token&#x60; or &#x60;Authorization: Bearer&#x60; header. See [Onezone documentation](/#/home/api/latest/onezone?anchor&#x3D;section/Overview/Authentication-and-authorization) for detailed explanation of the token concepts.  Curl examples: &#x60;&#x60;&#x60;bash curl -H \&quot;X-Auth-Token: $TOKEN\&quot; [...] curl -H \&quot;Authorization: Bearer $TOKEN\&quot; [...] curl -H \&quot;Macaroon: $TOKEN\&quot; [...]   # DEPRECATED &#x60;&#x60;&#x60;   ### Passphrase authentication  The token authentication dependes on the Onezone service. In special cases - during Onezone deployment or its outage - it is necessary to use the local **emergency passphrase**.  The passphrase should be provided in a Basic authentication header with username &#x60;onepanel&#x60;. For curl users this means &#x60;&#x60;&#x60;bash curl -u onepanel:TheEmergencyPassphrase &#x60;&#x60;&#x60;  The passphrase can also be sent without any username, as the whole content of base64-encoded string in Basic authorization header, e.g. &#x60;&#x60;&#x60;bash curl -H \&quot;Authorization: Basic $(echo -n TheEmergencyPassphrase | base64)\&quot; &#x60;&#x60;&#x60;  The passphrase is set during deployment. It can be changed in the Onepanel GUI or with an API request: &#x60;&#x60;&#x60;bash curl -X PUT &#x27;https://$PANEL_HOST:9443/api/v3/onepanel/emergency_passphrase&#x27; \\ -u onepanel:TheEmergencyPassphrase -H &#x27;Content-Type: application/json&#x27; \\ -d &#x27;{\&quot;currentPassphrase\&quot;: \&quot;TheEmergencyPassphrase\&quot;, \&quot;newPassphrase\&quot;: \&quot;TheNewPassphrase\&quot;}&#x27; &#x60;&#x60;&#x60;  ## API structure  The Onepanel API is structured to reflect that it can either be used to control **Onezone** or **Oneprovider** deployment, each Onedata component deployment has a separate Onepanel instance. In order to make the API calls explicit, **Onezone** or **Oneprovider** specific requests have different paths, i.e.:   * Onezone specific operations start with &#x60;/api/v3/onepanel/zone/&#x60;   * Oneprovider specific operations start with &#x60;/api/v3/onepanel/provider/&#x60;   * Common operations paths include &#x60;/api/v3/onepanel/users&#x60;,     &#x60;/api/v3/onepanel/hosts&#x60; and &#x60;/api/v3/onepanel/tasks&#x60;  The overall configuration of each component can be controlled by updating &#x60;/api/v3/onepanel/zone/configuration&#x60; and &#x60;/api/v3/onepanel/provider/configuration&#x60; resources.  ## Examples  Below are some example requests to Onepanel using cURL:  **Add storage resource to provider** &#x60;&#x60;&#x60;bash curl -X POST -u onepanel:Passphrase1 -k -vvv -H \&quot;content-type: application/json\&quot; \\ -d &#x27;{\&quot;NFS\&quot;: {\&quot;type\&quot;: \&quot;posix\&quot;, \&quot;mountPoint\&quot;: \&quot;/mnt/vfs\&quot;}}&#x27; \\ https://172.17.0.4:9443/api/v3/onepanel/provider/storages &#x60;&#x60;&#x60;  **Add a new Onezone worker** &#x60;&#x60;&#x60;bash curl -X POST -u onepanel:Passphrase1 -k -vvv -H \&quot;content-type: application/json\&quot; \\ -d &#x27;{\&quot;hosts\&quot;: [\&quot;node1.p1.1.dev\&quot;]}&#x27; \\ https://172.17.0.4:9443/api/v3/onepanel/zone/workers &#x60;&#x60;&#x60;   # noqa: E501
    """
)
